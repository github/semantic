-- Load the pretty-show & hscolour packages for use with :pretty.
:set -package pretty-show -package hscolour

-- See docs/ðŸ’¡ProTip!.md
:undef pretty
:def pretty \ _ -> return ":set -interactive-print Semantic.Util.Pretty.prettyShow"

-- See docs/ðŸ’¡ProTip!.md
:undef no-pretty
:def no-pretty \_ -> return ":set -interactive-print System.IO.print"

-- See docs/ðŸ’¡ProTip!.md
:undef r
:def r \_ -> return (unlines [":reload", ":pretty"])

-- See docs/ðŸ’¡ProTip!.md for documentation & examples.
:{
assignmentExample lang = case lang of
  "Python" -> mk "py" "python"
  "Go" -> mk "go" "go"
  "Ruby" -> mk "rb" "ruby"
  "JavaScript" -> mk "js" "typescript"
  "TypeScript" -> mk "ts" "typescript"
  "Haskell" -> mk "hs" "haskell"
  "Markdown" -> mk "md" "markdown"
  "JSON" -> mk "json" "json"
  "Java" -> mk "java" "java"
  "PHP" -> mk "php" "php"
  _ -> mk "" ""
  where mk fileExtension parser = putStrLn ("example: fmap (() <$) . runTask . parse " ++ parser ++ "Parser =<< Semantic.Util.blob \"example." ++ fileExtension ++ "\"") >> return ("import Parsing.Parser\nimport Semantic.Task\nimport Semantic.Util")
:}
:undef assignment
:def assignment assignmentExample

-- Enable breaking on errors for code written in the repl.
:seti -fbreak-on-error

-- Continue loading after warnings when in the repl.
:set -Wwarn

-- Use a cyan lambda as the prompt.
:set prompt "\ESC[1;36m\STXÎ» \ESC[m\STX"
