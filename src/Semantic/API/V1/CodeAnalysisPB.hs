-- Code generated by protoc-gen-haskell 0.1.0, DO NOT EDIT.
{-# LANGUAGE DerivingVia, DeriveAnyClass, DuplicateRecordFields #-}
{-# OPTIONS_GHC -Wno-unused-imports -Wno-missing-export-lists #-}
module Semantic.Api.V1.CodeAnalysisPB where

import Data.Aeson
import Data.ByteString (ByteString)
import Data.Fixed (Fixed)
import Data.Int
import Data.Text (Text)
import Data.Word
import GHC.Generics
import Proto3.Suite

data PingRequest = PingRequest
  { service :: Text
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data PingResponse = PingResponse
  { status :: Text
  , hostname :: Text
  , timestamp :: Text
  , sha :: Text
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data ParseTreeRequest = ParseTreeRequest
  { blobs :: [Blob]
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data ParseTreeSymbolResponse = ParseTreeSymbolResponse
  { files :: [File]
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data ParseTreeGraphResponse = ParseTreeGraphResponse
  { files :: [ParseTreeFileGraph]
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data ParseTreeFileGraph = ParseTreeFileGraph
  { path :: Text
  , language :: Language
  , vertices :: [TermVertex]
  , edges :: [TermEdge]
  , errors :: [ParseError]
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data TermEdge = TermEdge
  { source :: Int64
  , target :: Int64
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data TermVertex = TermVertex
  { vertexId :: Int64
  , term :: Text
  , span :: Maybe Span
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data ParseError = ParseError
  { error :: Text
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data DiffTreeRequest = DiffTreeRequest
  { blobs :: [BlobPair]
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data DiffTreeTOCResponse = DiffTreeTOCResponse
  { files :: [TOCSummaryFile]
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data TOCSummaryFile = TOCSummaryFile
  { path :: Text
  , language :: Language
  , changes :: [TOCSummaryChange]
  , errors :: [TOCSummaryError]
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data TOCSummaryChange = TOCSummaryChange
  { category :: Text
  , term :: Text
  , span :: Maybe Span
  , changeType :: ChangeType
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data TOCSummaryError = TOCSummaryError
  { error :: Text
  , span :: Maybe Span
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data DiffTreeGraphResponse = DiffTreeGraphResponse
  { files :: [DiffTreeFileGraph]
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data DiffTreeFileGraph = DiffTreeFileGraph
  { path :: Text
  , language :: Language
  , vertices :: [DiffTreeVertex]
  , edges :: [DiffTreeEdge]
  , errors :: [ParseError]
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data DiffTreeEdge = DiffTreeEdge
  { source :: Int64
  , target :: Int64
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data DiffTreeVertexDiffTerm
  = Deleted { deleted :: Maybe DeletedTerm }
  | Inserted { inserted :: Maybe InsertedTerm }
  | Replaced { replaced :: Maybe ReplacedTerm }
  | Merged { merged :: Maybe MergedTerm }
  deriving stock (Eq, Ord, Show, Generic)
  deriving anyclass (Message, Named, FromJSON, ToJSON)

data DiffTreeVertex = DiffTreeVertex
  { diffVertexId :: Int64
  , diffTerm :: Maybe DiffTreeVertexDiffTerm
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data DeletedTerm = DeletedTerm
  { term :: Text
  , span :: Maybe Span
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data InsertedTerm = InsertedTerm
  { term :: Text
  , span :: Maybe Span
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data ReplacedTerm = ReplacedTerm
  { beforeTerm :: Text
  , beforeSpan :: Maybe Span
  , afterTerm :: Text
  , afterSpan :: Maybe Span
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data MergedTerm = MergedTerm
  { term :: Text
  , beforeSpan :: Maybe Span
  , afterSpan :: Maybe Span
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data Blob = Blob
  { content :: Text
  , path :: Text
  , language :: Language
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data BlobPair = BlobPair
  { before :: Maybe Blob
  , after :: Maybe Blob
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data File = File
  { path :: Text
  , language :: Language
  , symbols :: [Symbol]
  , errors :: [ParseError]
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data Symbol = Symbol
  { symbol :: Text
  , kind :: Text
  , line :: Text
  , span :: Maybe Span
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data Position = Position
  { line :: Int64
  , column :: Int64
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data Span = Span
  { start :: Maybe Position
  , end :: Maybe Position
  } deriving stock (Eq, Ord, Show, Generic)
    deriving anyclass (Message, Named, FromJSON, ToJSON)

data ChangeType
  = None
  | Added
  | Removed
  | Modified
  deriving stock (Eq, Ord, Show, Enum, Bounded, Generic)
  deriving anyclass (Named, MessageField, FromJSON, ToJSON)
  deriving Primitive via PrimitiveEnum ChangeType
instance HasDefault ChangeType where def = None

data Language
  = Unknown
  | Go
  | Haskell
  | Java
  | Javascript
  | Json
  | Jsx
  | Markdown
  | Python
  | Ruby
  | Typescript
  | Php
  deriving stock (Eq, Ord, Show, Enum, Bounded, Generic)
  deriving anyclass (Named, MessageField, FromJSON, ToJSON)
  deriving Primitive via PrimitiveEnum Language
instance HasDefault Language where def = Unknown
