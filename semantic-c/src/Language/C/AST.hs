-- Language definition for C, generated by ast-generate. Do not edit!
{-# LANGUAGE CPP #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE QuantifiedConstraints #-}
{-# LANGUAGE StandaloneDeriving #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE UndecidableInstances #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}

module Language.C.AST (module Language.C.AST, getTestCorpusDir) where

import qualified AST.Parse
import qualified AST.Token
import qualified AST.Traversable1.Class
import qualified AST.Unmarshal
import qualified Data.Foldable
import qualified Data.List as Data.OldList
import qualified Data.Maybe as GHC.Maybe
import qualified Data.Text.Internal
import qualified Data.Traversable
import qualified GHC.Base
import qualified GHC.Generics
import qualified GHC.Records
import qualified GHC.Show
import TreeSitter.C (getTestCorpusDir)
import qualified TreeSitter.Node
import qualified Prelude as GHC.Classes

debugSymbolNames :: [GHC.Base.String]
debugSymbolNames = debugSymbolNames_0

debugSymbolNames_0 :: [GHC.Base.String]
debugSymbolNames_0 =
  [ "end",
    "identifier",
    "_#include",
    "_\n",
    "_#define",
    "_(",
    "_...",
    "_,",
    "_)",
    "_#if",
    "_#endif",
    "_#ifdef",
    "_#ifndef",
    "_#else",
    "_#elif",
    "preproc_directive",
    "preproc_arg",
    "_(",
    "_defined",
    "_!",
    "_~",
    "_-",
    "_+",
    "_*",
    "_/",
    "_%",
    "_||",
    "_&&",
    "_|",
    "_^",
    "_&",
    "_==",
    "_!=",
    "_>",
    "_>=",
    "_<=",
    "_<",
    "_<<",
    "_>>",
    "_;",
    "_typedef",
    "_extern",
    "___attribute__",
    "___declspec",
    "___based",
    "___cdecl",
    "___clrcall",
    "___stdcall",
    "___fastcall",
    "___thiscall",
    "___vectorcall",
    "ms_restrict_modifier",
    "ms_unsigned_ptr_modifier",
    "ms_signed_ptr_modifier",
    "__unaligned",
    "___unaligned",
    "_{",
    "_}",
    "_[",
    "_]",
    "_=",
    "_static",
    "_auto",
    "_register",
    "_inline",
    "_const",
    "_volatile",
    "_restrict",
    "__Atomic",
    "_signed",
    "_unsigned",
    "_long",
    "_short",
    "primitive_type",
    "_enum",
    "_struct",
    "_union",
    "_:",
    "_if",
    "_else",
    "_switch",
    "_case",
    "_default",
    "_while",
    "_do",
    "_for",
    "_return",
    "_break",
    "_continue",
    "_goto",
    "_?",
    "_*=",
    "_/=",
    "_%=",
    "_+=",
    "_-=",
    "_<<=",
    "_>>=",
    "_&=",
    "_^=",
    "_|=",
    "_--",
    "_++",
    "_sizeof",
    "_.",
    "_->",
    "number_literal",
    "_L'",
    "_u'",
    "_U'",
    "_u8'",
    "_'",
    "_char_literal_token1",
    "_L\"",
    "_u\"",
    "_U\"",
    "_u8\"",
    "_\"",
    "_string_literal_token1",
    "escape_sequence",
    "system_lib_string",
    "true",
    "false",
    "null",
    "comment",
    "translation_unit",
    "preproc_include",
    "preproc_def",
    "preproc_function_def",
    "preproc_params",
    "preproc_call",
    "preproc_if",
    "preproc_ifdef",
    "preproc_else",
    "preproc_elif",
    "preproc_if",
    "preproc_ifdef",
    "preproc_else",
    "preproc_elif",
    "_preproc_expression",
    "parenthesized_expression",
    "preproc_defined",
    "unary_expression",
    "call_expression",
    "argument_list",
    "binary_expression",
    "function_definition",
    "declaration",
    "type_definition",
    "_declaration_specifiers",
    "linkage_specification",
    "attribute_specifier",
    "ms_declspec_modifier",
    "ms_based_modifier",
    "ms_call_modifier",
    "ms_unaligned_ptr_modifier",
    "ms_pointer_modifier",
    "declaration_list",
    "_declarator",
    "_field_declarator",
    "_type_declarator",
    "_abstract_declarator",
    "parenthesized_declarator",
    "parenthesized_declarator",
    "parenthesized_declarator",
    "abstract_parenthesized_declarator",
    "pointer_declarator",
    "pointer_declarator",
    "pointer_declarator",
    "abstract_pointer_declarator",
    "function_declarator",
    "function_declarator",
    "function_declarator",
    "abstract_function_declarator",
    "array_declarator",
    "array_declarator",
    "array_declarator",
    "abstract_array_declarator",
    "init_declarator",
    "compound_statement",
    "storage_class_specifier",
    "type_qualifier",
    "_type_specifier",
    "sized_type_specifier",
    "enum_specifier",
    "enumerator_list",
    "struct_specifier",
    "union_specifier",
    "field_declaration_list",
    "_field_declaration_list_item",
    "field_declaration",
    "bitfield_clause",
    "enumerator",
    "parameter_list",
    "parameter_declaration",
    "labeled_statement",
    "expression_statement",
    "if_statement",
    "switch_statement",
    "case_statement",
    "while_statement",
    "do_statement",
    "for_statement",
    "return_statement",
    "break_statement",
    "continue_statement",
    "goto_statement",
    "_expression",
    "comma_expression",
    "conditional_expression",
    "assignment_expression",
    "pointer_expression",
    "unary_expression",
    "binary_expression",
    "update_expression",
    "cast_expression",
    "type_descriptor",
    "sizeof_expression",
    "subscript_expression",
    "call_expression",
    "argument_list",
    "field_expression",
    "compound_literal_expression",
    "parenthesized_expression",
    "initializer_list",
    "initializer_pair",
    "subscript_designator",
    "field_designator",
    "char_literal",
    "concatenated_string",
    "string_literal",
    "_empty_declaration",
    "macro_type_specifier",
    "_translation_unit_repeat1",
    "_preproc_params_repeat1",
    "_preproc_if_in_field_declaration_list_repeat1",
    "_preproc_argument_list_repeat1",
    "_declaration_repeat1",
    "_type_definition_repeat1",
    "_type_definition_repeat2",
    "__declaration_specifiers_repeat1",
    "_pointer_declarator_repeat1",
    "_function_declarator_repeat1",
    "_sized_type_specifier_repeat1",
    "_enumerator_list_repeat1",
    "_field_declaration_repeat1",
    "_parameter_list_repeat1",
    "_case_statement_repeat1",
    "_argument_list_repeat1",
    "_initializer_list_repeat1",
    "_initializer_pair_repeat1",
    "_concatenated_string_repeat1",
    "_string_literal_repeat1",
    "field_identifier",
    "statement_identifier",
    "type_identifier"
  ]

newtype AbstractDeclarator a = AbstractDeclarator {getAbstractDeclarator :: ((AbstractArrayDeclarator GHC.Generics.:+: AbstractFunctionDeclarator GHC.Generics.:+: AbstractParenthesizedDeclarator GHC.Generics.:+: AbstractPointerDeclarator) a)}
  deriving newtype (AST.Unmarshal.SymbolMatching)
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_1.
      AST.Traversable1.Class.Traversable1 a_1
    )

instance GHC.Records.HasField "ann" (AbstractDeclarator a_2) a_2 where
  getField = AST.Unmarshal.gann GHC.Base.. getAbstractDeclarator

deriving instance GHC.Classes.Eq a_3 => GHC.Classes.Eq (AbstractDeclarator a_3)

deriving instance GHC.Classes.Ord a_4 => GHC.Classes.Ord (AbstractDeclarator a_4)

deriving instance GHC.Show.Show a_5 => GHC.Show.Show (AbstractDeclarator a_5)

instance AST.Unmarshal.Unmarshal AbstractDeclarator

instance Data.Foldable.Foldable AbstractDeclarator where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor AbstractDeclarator where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable AbstractDeclarator where
  traverse = AST.Traversable1.Class.traverseDefault1

newtype Declarator a = Declarator {getDeclarator :: ((ArrayDeclarator GHC.Generics.:+: FunctionDeclarator GHC.Generics.:+: Identifier GHC.Generics.:+: ParenthesizedDeclarator GHC.Generics.:+: PointerDeclarator) a)}
  deriving newtype (AST.Unmarshal.SymbolMatching)
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_6.
      AST.Traversable1.Class.Traversable1 a_6
    )

instance GHC.Records.HasField "ann" (Declarator a_7) a_7 where
  getField = AST.Unmarshal.gann GHC.Base.. getDeclarator

deriving instance GHC.Classes.Eq a_8 => GHC.Classes.Eq (Declarator a_8)

deriving instance GHC.Classes.Ord a_9 => GHC.Classes.Ord (Declarator a_9)

deriving instance GHC.Show.Show a_10 => GHC.Show.Show (Declarator a_10)

instance AST.Unmarshal.Unmarshal Declarator

instance Data.Foldable.Foldable Declarator where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Declarator where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Declarator where
  traverse = AST.Traversable1.Class.traverseDefault1

newtype Expression a = Expression {getExpression :: ((AssignmentExpression GHC.Generics.:+: BinaryExpression GHC.Generics.:+: CallExpression GHC.Generics.:+: CastExpression GHC.Generics.:+: CharLiteral GHC.Generics.:+: CompoundLiteralExpression GHC.Generics.:+: ConcatenatedString GHC.Generics.:+: ConditionalExpression GHC.Generics.:+: False GHC.Generics.:+: FieldExpression GHC.Generics.:+: Identifier GHC.Generics.:+: Null GHC.Generics.:+: NumberLiteral GHC.Generics.:+: ParenthesizedExpression GHC.Generics.:+: PointerExpression GHC.Generics.:+: SizeofExpression GHC.Generics.:+: StringLiteral GHC.Generics.:+: SubscriptExpression GHC.Generics.:+: True GHC.Generics.:+: UnaryExpression GHC.Generics.:+: UpdateExpression) a)}
  deriving newtype (AST.Unmarshal.SymbolMatching)
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_11.
      AST.Traversable1.Class.Traversable1 a_11
    )

instance GHC.Records.HasField "ann" (Expression a_12) a_12 where
  getField = AST.Unmarshal.gann GHC.Base.. getExpression

deriving instance GHC.Classes.Eq a_13 => GHC.Classes.Eq (Expression a_13)

deriving instance GHC.Classes.Ord a_14 => GHC.Classes.Ord (Expression a_14)

deriving instance GHC.Show.Show a_15 => GHC.Show.Show (Expression a_15)

instance AST.Unmarshal.Unmarshal Expression

instance Data.Foldable.Foldable Expression where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Expression where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Expression where
  traverse = AST.Traversable1.Class.traverseDefault1

newtype FieldDeclarator a = FieldDeclarator {getFieldDeclarator :: ((ArrayDeclarator GHC.Generics.:+: FieldIdentifier GHC.Generics.:+: FunctionDeclarator GHC.Generics.:+: ParenthesizedDeclarator GHC.Generics.:+: PointerDeclarator) a)}
  deriving newtype (AST.Unmarshal.SymbolMatching)
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_16.
      AST.Traversable1.Class.Traversable1 a_16
    )

instance GHC.Records.HasField "ann" (FieldDeclarator a_17) a_17 where
  getField = AST.Unmarshal.gann GHC.Base.. getFieldDeclarator

deriving instance GHC.Classes.Eq a_18 => GHC.Classes.Eq (FieldDeclarator a_18)

deriving instance GHC.Classes.Ord a_19 => GHC.Classes.Ord (FieldDeclarator a_19)

deriving instance GHC.Show.Show a_20 => GHC.Show.Show (FieldDeclarator a_20)

instance AST.Unmarshal.Unmarshal FieldDeclarator

instance Data.Foldable.Foldable FieldDeclarator where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor FieldDeclarator where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable FieldDeclarator where
  traverse = AST.Traversable1.Class.traverseDefault1

newtype Statement a = Statement {getStatement :: ((BreakStatement GHC.Generics.:+: CaseStatement GHC.Generics.:+: CompoundStatement GHC.Generics.:+: ContinueStatement GHC.Generics.:+: DoStatement GHC.Generics.:+: ExpressionStatement GHC.Generics.:+: ForStatement GHC.Generics.:+: GotoStatement GHC.Generics.:+: IfStatement GHC.Generics.:+: LabeledStatement GHC.Generics.:+: ReturnStatement GHC.Generics.:+: SwitchStatement GHC.Generics.:+: WhileStatement) a)}
  deriving newtype (AST.Unmarshal.SymbolMatching)
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_21.
      AST.Traversable1.Class.Traversable1 a_21
    )

instance GHC.Records.HasField "ann" (Statement a_22) a_22 where
  getField = AST.Unmarshal.gann GHC.Base.. getStatement

deriving instance GHC.Classes.Eq a_23 => GHC.Classes.Eq (Statement a_23)

deriving instance GHC.Classes.Ord a_24 => GHC.Classes.Ord (Statement a_24)

deriving instance GHC.Show.Show a_25 => GHC.Show.Show (Statement a_25)

instance AST.Unmarshal.Unmarshal Statement

instance Data.Foldable.Foldable Statement where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Statement where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Statement where
  traverse = AST.Traversable1.Class.traverseDefault1

newtype TypeDeclarator a = TypeDeclarator {getTypeDeclarator :: ((ArrayDeclarator GHC.Generics.:+: FunctionDeclarator GHC.Generics.:+: ParenthesizedDeclarator GHC.Generics.:+: PointerDeclarator GHC.Generics.:+: TypeIdentifier) a)}
  deriving newtype (AST.Unmarshal.SymbolMatching)
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_26.
      AST.Traversable1.Class.Traversable1 a_26
    )

instance GHC.Records.HasField "ann" (TypeDeclarator a_27) a_27 where
  getField = AST.Unmarshal.gann GHC.Base.. getTypeDeclarator

deriving instance GHC.Classes.Eq a_28 => GHC.Classes.Eq (TypeDeclarator a_28)

deriving instance GHC.Classes.Ord a_29 => GHC.Classes.Ord (TypeDeclarator a_29)

deriving instance GHC.Show.Show a_30 => GHC.Show.Show (TypeDeclarator a_30)

instance AST.Unmarshal.Unmarshal TypeDeclarator

instance Data.Foldable.Foldable TypeDeclarator where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor TypeDeclarator where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable TypeDeclarator where
  traverse = AST.Traversable1.Class.traverseDefault1

newtype TypeSpecifier a = TypeSpecifier {getTypeSpecifier :: ((EnumSpecifier GHC.Generics.:+: MacroTypeSpecifier GHC.Generics.:+: PrimitiveType GHC.Generics.:+: SizedTypeSpecifier GHC.Generics.:+: StructSpecifier GHC.Generics.:+: TypeIdentifier GHC.Generics.:+: UnionSpecifier) a)}
  deriving newtype (AST.Unmarshal.SymbolMatching)
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_31.
      AST.Traversable1.Class.Traversable1 a_31
    )

instance GHC.Records.HasField "ann" (TypeSpecifier a_32) a_32 where
  getField = AST.Unmarshal.gann GHC.Base.. getTypeSpecifier

deriving instance GHC.Classes.Eq a_33 => GHC.Classes.Eq (TypeSpecifier a_33)

deriving instance GHC.Classes.Ord a_34 => GHC.Classes.Ord (TypeSpecifier a_34)

deriving instance GHC.Show.Show a_35 => GHC.Show.Show (TypeSpecifier a_35)

instance AST.Unmarshal.Unmarshal TypeSpecifier

instance Data.Foldable.Foldable TypeSpecifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor TypeSpecifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable TypeSpecifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data AbstractArrayDeclarator a = AbstractArrayDeclarator
  { ann :: a,
    declarator :: (GHC.Maybe.Maybe (AST.Parse.Err (AbstractDeclarator a))),
    size :: (GHC.Maybe.Maybe (AST.Parse.Err ((AnonymousStar GHC.Generics.:+: Expression) a))),
    extraChildren :: ([AST.Parse.Err (TypeQualifier a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_36.
      AST.Traversable1.Class.Traversable1 a_36
    )

instance AST.Unmarshal.SymbolMatching AbstractArrayDeclarator where
  matchedSymbols _ = [177]
  showFailure _ node_37 =
    "expected "
      GHC.Base.<> ( "abstract_array_declarator"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_37 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_37) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_38 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_39 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_40 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_41 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_38
        c1_39 = TreeSitter.Node.nodeStartPoint node_37
      TreeSitter.Node.TSPoint
        r2_40
        c2_41 = TreeSitter.Node.nodeEndPoint node_37

deriving instance GHC.Classes.Eq a_42 => GHC.Classes.Eq (AbstractArrayDeclarator a_42)

deriving instance GHC.Classes.Ord a_43 => GHC.Classes.Ord (AbstractArrayDeclarator a_43)

deriving instance GHC.Show.Show a_44 => GHC.Show.Show (AbstractArrayDeclarator a_44)

instance AST.Unmarshal.Unmarshal AbstractArrayDeclarator

instance Data.Foldable.Foldable AbstractArrayDeclarator where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor AbstractArrayDeclarator where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable AbstractArrayDeclarator where
  traverse = AST.Traversable1.Class.traverseDefault1

data AbstractFunctionDeclarator a = AbstractFunctionDeclarator
  { ann :: a,
    declarator :: (GHC.Maybe.Maybe (AST.Parse.Err (AbstractDeclarator a))),
    parameters :: (AST.Parse.Err (ParameterList a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_45.
      AST.Traversable1.Class.Traversable1 a_45
    )

instance AST.Unmarshal.SymbolMatching AbstractFunctionDeclarator where
  matchedSymbols _ = [173]
  showFailure _ node_46 =
    "expected "
      GHC.Base.<> ( "abstract_function_declarator"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_46 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_46) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_47 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_48 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_49 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_50 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_47
        c1_48 = TreeSitter.Node.nodeStartPoint node_46
      TreeSitter.Node.TSPoint
        r2_49
        c2_50 = TreeSitter.Node.nodeEndPoint node_46

deriving instance GHC.Classes.Eq a_51 => GHC.Classes.Eq (AbstractFunctionDeclarator a_51)

deriving instance GHC.Classes.Ord a_52 => GHC.Classes.Ord (AbstractFunctionDeclarator a_52)

deriving instance GHC.Show.Show a_53 => GHC.Show.Show (AbstractFunctionDeclarator a_53)

instance AST.Unmarshal.Unmarshal AbstractFunctionDeclarator

instance Data.Foldable.Foldable AbstractFunctionDeclarator where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor AbstractFunctionDeclarator where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable AbstractFunctionDeclarator where
  traverse = AST.Traversable1.Class.traverseDefault1

data AbstractParenthesizedDeclarator a = AbstractParenthesizedDeclarator
  { ann :: a,
    extraChildren :: (AST.Parse.Err (AbstractDeclarator a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_54.
      AST.Traversable1.Class.Traversable1 a_54
    )

instance AST.Unmarshal.SymbolMatching AbstractParenthesizedDeclarator where
  matchedSymbols _ = [165]
  showFailure _ node_55 =
    "expected "
      GHC.Base.<> ( "abstract_parenthesized_declarator"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_55 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_55) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_56 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_57 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_58 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_59 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_56
        c1_57 = TreeSitter.Node.nodeStartPoint node_55
      TreeSitter.Node.TSPoint
        r2_58
        c2_59 = TreeSitter.Node.nodeEndPoint node_55

deriving instance GHC.Classes.Eq a_60 => GHC.Classes.Eq (AbstractParenthesizedDeclarator a_60)

deriving instance GHC.Classes.Ord a_61 => GHC.Classes.Ord (AbstractParenthesizedDeclarator a_61)

deriving instance GHC.Show.Show a_62 => GHC.Show.Show (AbstractParenthesizedDeclarator a_62)

instance AST.Unmarshal.Unmarshal AbstractParenthesizedDeclarator

instance Data.Foldable.Foldable AbstractParenthesizedDeclarator where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor AbstractParenthesizedDeclarator where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable AbstractParenthesizedDeclarator where
  traverse = AST.Traversable1.Class.traverseDefault1

data AbstractPointerDeclarator a = AbstractPointerDeclarator
  { ann :: a,
    declarator :: (GHC.Maybe.Maybe (AST.Parse.Err (AbstractDeclarator a))),
    extraChildren :: ([AST.Parse.Err (TypeQualifier a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_63.
      AST.Traversable1.Class.Traversable1 a_63
    )

instance AST.Unmarshal.SymbolMatching AbstractPointerDeclarator where
  matchedSymbols _ = [169]
  showFailure _ node_64 =
    "expected "
      GHC.Base.<> ( "abstract_pointer_declarator"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_64 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_64) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_65 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_66 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_67 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_68 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_65
        c1_66 = TreeSitter.Node.nodeStartPoint node_64
      TreeSitter.Node.TSPoint
        r2_67
        c2_68 = TreeSitter.Node.nodeEndPoint node_64

deriving instance GHC.Classes.Eq a_69 => GHC.Classes.Eq (AbstractPointerDeclarator a_69)

deriving instance GHC.Classes.Ord a_70 => GHC.Classes.Ord (AbstractPointerDeclarator a_70)

deriving instance GHC.Show.Show a_71 => GHC.Show.Show (AbstractPointerDeclarator a_71)

instance AST.Unmarshal.Unmarshal AbstractPointerDeclarator

instance Data.Foldable.Foldable AbstractPointerDeclarator where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor AbstractPointerDeclarator where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable AbstractPointerDeclarator where
  traverse = AST.Traversable1.Class.traverseDefault1

data ArgumentList a = ArgumentList
  { ann :: a,
    extraChildren :: ([AST.Parse.Err ((Expression GHC.Generics.:+: PreprocDefined) a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_72.
      AST.Traversable1.Class.Traversable1 a_72
    )

instance AST.Unmarshal.SymbolMatching ArgumentList where
  matchedSymbols _ = [144, 220]
  showFailure _ node_73 =
    "expected "
      GHC.Base.<> ( "argument_list, argument_list"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_73 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_73) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_74 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_75 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_76 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_77 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_74
        c1_75 = TreeSitter.Node.nodeStartPoint node_73
      TreeSitter.Node.TSPoint
        r2_76
        c2_77 = TreeSitter.Node.nodeEndPoint node_73

deriving instance GHC.Classes.Eq a_78 => GHC.Classes.Eq (ArgumentList a_78)

deriving instance GHC.Classes.Ord a_79 => GHC.Classes.Ord (ArgumentList a_79)

deriving instance GHC.Show.Show a_80 => GHC.Show.Show (ArgumentList a_80)

instance AST.Unmarshal.Unmarshal ArgumentList

instance Data.Foldable.Foldable ArgumentList where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor ArgumentList where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable ArgumentList where
  traverse = AST.Traversable1.Class.traverseDefault1

data ArrayDeclarator a = ArrayDeclarator
  { ann :: a,
    declarator :: (AST.Parse.Err ((Declarator GHC.Generics.:+: FieldDeclarator GHC.Generics.:+: TypeDeclarator) a)),
    size :: (GHC.Maybe.Maybe (AST.Parse.Err ((AnonymousStar GHC.Generics.:+: Expression) a))),
    extraChildren :: ([AST.Parse.Err (TypeQualifier a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_81.
      AST.Traversable1.Class.Traversable1 a_81
    )

instance AST.Unmarshal.SymbolMatching ArrayDeclarator where
  matchedSymbols _ = [174, 175, 176]
  showFailure _ node_82 =
    "expected "
      GHC.Base.<> ( "array_declarator, array_declarator, array_declarator"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_82 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_82) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_83 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_84 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_85 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_86 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_83
        c1_84 = TreeSitter.Node.nodeStartPoint node_82
      TreeSitter.Node.TSPoint
        r2_85
        c2_86 = TreeSitter.Node.nodeEndPoint node_82

deriving instance GHC.Classes.Eq a_87 => GHC.Classes.Eq (ArrayDeclarator a_87)

deriving instance GHC.Classes.Ord a_88 => GHC.Classes.Ord (ArrayDeclarator a_88)

deriving instance GHC.Show.Show a_89 => GHC.Show.Show (ArrayDeclarator a_89)

instance AST.Unmarshal.Unmarshal ArrayDeclarator

instance Data.Foldable.Foldable ArrayDeclarator where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor ArrayDeclarator where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable ArrayDeclarator where
  traverse = AST.Traversable1.Class.traverseDefault1

data AssignmentExpression a = AssignmentExpression
  { ann :: a,
    right :: (AST.Parse.Err (Expression a)),
    left :: (AST.Parse.Err ((CallExpression GHC.Generics.:+: FieldExpression GHC.Generics.:+: Identifier GHC.Generics.:+: ParenthesizedExpression GHC.Generics.:+: PointerExpression GHC.Generics.:+: SubscriptExpression) a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_90.
      AST.Traversable1.Class.Traversable1 a_90
    )

instance AST.Unmarshal.SymbolMatching AssignmentExpression where
  matchedSymbols _ = [210]
  showFailure _ node_91 =
    "expected "
      GHC.Base.<> ( "assignment_expression"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_91 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_91) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_92 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_93 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_94 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_95 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_92
        c1_93 = TreeSitter.Node.nodeStartPoint node_91
      TreeSitter.Node.TSPoint
        r2_94
        c2_95 = TreeSitter.Node.nodeEndPoint node_91

deriving instance GHC.Classes.Eq a_96 => GHC.Classes.Eq (AssignmentExpression a_96)

deriving instance GHC.Classes.Ord a_97 => GHC.Classes.Ord (AssignmentExpression a_97)

deriving instance GHC.Show.Show a_98 => GHC.Show.Show (AssignmentExpression a_98)

instance AST.Unmarshal.Unmarshal AssignmentExpression

instance Data.Foldable.Foldable AssignmentExpression where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor AssignmentExpression where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable AssignmentExpression where
  traverse = AST.Traversable1.Class.traverseDefault1

data AttributeSpecifier a = AttributeSpecifier
  { ann :: a,
    extraChildren :: (AST.Parse.Err (ArgumentList a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_99.
      AST.Traversable1.Class.Traversable1 a_99
    )

instance AST.Unmarshal.SymbolMatching AttributeSpecifier where
  matchedSymbols _ = [151]
  showFailure _ node_100 =
    "expected "
      GHC.Base.<> ( "attribute_specifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_100 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_100) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_101 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_102 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_103 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_104 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_101
        c1_102 = TreeSitter.Node.nodeStartPoint node_100
      TreeSitter.Node.TSPoint
        r2_103
        c2_104 = TreeSitter.Node.nodeEndPoint node_100

deriving instance GHC.Classes.Eq a_105 => GHC.Classes.Eq (AttributeSpecifier a_105)

deriving instance GHC.Classes.Ord a_106 => GHC.Classes.Ord (AttributeSpecifier a_106)

deriving instance GHC.Show.Show a_107 => GHC.Show.Show (AttributeSpecifier a_107)

instance AST.Unmarshal.Unmarshal AttributeSpecifier

instance Data.Foldable.Foldable AttributeSpecifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor AttributeSpecifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable AttributeSpecifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data BinaryExpression a = BinaryExpression
  { ann :: a,
    right :: (AST.Parse.Err ((Expression GHC.Generics.:+: PreprocDefined) a)),
    left :: (AST.Parse.Err ((Expression GHC.Generics.:+: PreprocDefined) a)),
    operator :: (AST.Parse.Err ((AnonymousBangEqual GHC.Generics.:+: AnonymousPercent GHC.Generics.:+: AnonymousAmpersand GHC.Generics.:+: AnonymousAmpersandAmpersand GHC.Generics.:+: AnonymousStar GHC.Generics.:+: AnonymousPlus GHC.Generics.:+: AnonymousMinus GHC.Generics.:+: AnonymousSlash GHC.Generics.:+: AnonymousLAngle GHC.Generics.:+: AnonymousLAngleLAngle GHC.Generics.:+: AnonymousLAngleEqual GHC.Generics.:+: AnonymousEqualEqual GHC.Generics.:+: AnonymousRAngle GHC.Generics.:+: AnonymousRAngleEqual GHC.Generics.:+: AnonymousRAngleRAngle GHC.Generics.:+: AnonymousCaret GHC.Generics.:+: AnonymousPipe GHC.Generics.:+: AnonymousPipePipe) a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_108.
      AST.Traversable1.Class.Traversable1 a_108
    )

instance AST.Unmarshal.SymbolMatching BinaryExpression where
  matchedSymbols _ = [145, 213]
  showFailure _ node_109 =
    "expected "
      GHC.Base.<> ( "binary_expression, binary_expression"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_109 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_109) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_110 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_111 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_112 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_113 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_110
        c1_111 = TreeSitter.Node.nodeStartPoint node_109
      TreeSitter.Node.TSPoint
        r2_112
        c2_113 = TreeSitter.Node.nodeEndPoint node_109

deriving instance GHC.Classes.Eq a_114 => GHC.Classes.Eq (BinaryExpression a_114)

deriving instance GHC.Classes.Ord a_115 => GHC.Classes.Ord (BinaryExpression a_115)

deriving instance GHC.Show.Show a_116 => GHC.Show.Show (BinaryExpression a_116)

instance AST.Unmarshal.Unmarshal BinaryExpression

instance Data.Foldable.Foldable BinaryExpression where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor BinaryExpression where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable BinaryExpression where
  traverse = AST.Traversable1.Class.traverseDefault1

data BitfieldClause a = BitfieldClause
  { ann :: a,
    extraChildren :: (AST.Parse.Err (Expression a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_117.
      AST.Traversable1.Class.Traversable1 a_117
    )

instance AST.Unmarshal.SymbolMatching BitfieldClause where
  matchedSymbols _ = [191]
  showFailure _ node_118 =
    "expected "
      GHC.Base.<> ( "bitfield_clause"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_118 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_118) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_119 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_120 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_121 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_122 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_119
        c1_120 = TreeSitter.Node.nodeStartPoint node_118
      TreeSitter.Node.TSPoint
        r2_121
        c2_122 = TreeSitter.Node.nodeEndPoint node_118

deriving instance GHC.Classes.Eq a_123 => GHC.Classes.Eq (BitfieldClause a_123)

deriving instance GHC.Classes.Ord a_124 => GHC.Classes.Ord (BitfieldClause a_124)

deriving instance GHC.Show.Show a_125 => GHC.Show.Show (BitfieldClause a_125)

instance AST.Unmarshal.Unmarshal BitfieldClause

instance Data.Foldable.Foldable BitfieldClause where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor BitfieldClause where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable BitfieldClause where
  traverse = AST.Traversable1.Class.traverseDefault1

data BreakStatement a = BreakStatement {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_126.
      AST.Traversable1.Class.Traversable1 a_126
    )

instance AST.Unmarshal.SymbolMatching BreakStatement where
  matchedSymbols _ = [204]
  showFailure _ node_127 =
    "expected "
      GHC.Base.<> ( "break_statement"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_127 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_127) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_128 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_129 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_130 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_131 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_128
        c1_129 = TreeSitter.Node.nodeStartPoint node_127
      TreeSitter.Node.TSPoint
        r2_130
        c2_131 = TreeSitter.Node.nodeEndPoint node_127

deriving instance GHC.Classes.Eq a_132 => GHC.Classes.Eq (BreakStatement a_132)

deriving instance GHC.Classes.Ord a_133 => GHC.Classes.Ord (BreakStatement a_133)

deriving instance GHC.Show.Show a_134 => GHC.Show.Show (BreakStatement a_134)

instance AST.Unmarshal.Unmarshal BreakStatement

instance Data.Foldable.Foldable BreakStatement where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor BreakStatement where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable BreakStatement where
  traverse = AST.Traversable1.Class.traverseDefault1

data CallExpression a = CallExpression
  { ann :: a,
    function :: (AST.Parse.Err (Expression a)),
    arguments :: (AST.Parse.Err (ArgumentList a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_135.
      AST.Traversable1.Class.Traversable1 a_135
    )

instance AST.Unmarshal.SymbolMatching CallExpression where
  matchedSymbols _ = [143, 219]
  showFailure _ node_136 =
    "expected "
      GHC.Base.<> ( "call_expression, call_expression"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_136 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_136) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_137 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_138 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_139 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_140 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_137
        c1_138 = TreeSitter.Node.nodeStartPoint node_136
      TreeSitter.Node.TSPoint
        r2_139
        c2_140 = TreeSitter.Node.nodeEndPoint node_136

deriving instance GHC.Classes.Eq a_141 => GHC.Classes.Eq (CallExpression a_141)

deriving instance GHC.Classes.Ord a_142 => GHC.Classes.Ord (CallExpression a_142)

deriving instance GHC.Show.Show a_143 => GHC.Show.Show (CallExpression a_143)

instance AST.Unmarshal.Unmarshal CallExpression

instance Data.Foldable.Foldable CallExpression where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor CallExpression where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable CallExpression where
  traverse = AST.Traversable1.Class.traverseDefault1

data CaseStatement a = CaseStatement
  { ann :: a,
    value :: (GHC.Maybe.Maybe (AST.Parse.Err (Expression a))),
    extraChildren :: ([AST.Parse.Err ((BreakStatement GHC.Generics.:+: CompoundStatement GHC.Generics.:+: ContinueStatement GHC.Generics.:+: Declaration GHC.Generics.:+: DoStatement GHC.Generics.:+: ExpressionStatement GHC.Generics.:+: ForStatement GHC.Generics.:+: GotoStatement GHC.Generics.:+: IfStatement GHC.Generics.:+: LabeledStatement GHC.Generics.:+: ReturnStatement GHC.Generics.:+: SwitchStatement GHC.Generics.:+: TypeDefinition GHC.Generics.:+: WhileStatement) a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_144.
      AST.Traversable1.Class.Traversable1 a_144
    )

instance AST.Unmarshal.SymbolMatching CaseStatement where
  matchedSymbols _ = [199]
  showFailure _ node_145 =
    "expected "
      GHC.Base.<> ( "case_statement"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_145 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_145) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_146 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_147 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_148 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_149 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_146
        c1_147 = TreeSitter.Node.nodeStartPoint node_145
      TreeSitter.Node.TSPoint
        r2_148
        c2_149 = TreeSitter.Node.nodeEndPoint node_145

deriving instance GHC.Classes.Eq a_150 => GHC.Classes.Eq (CaseStatement a_150)

deriving instance GHC.Classes.Ord a_151 => GHC.Classes.Ord (CaseStatement a_151)

deriving instance GHC.Show.Show a_152 => GHC.Show.Show (CaseStatement a_152)

instance AST.Unmarshal.Unmarshal CaseStatement

instance Data.Foldable.Foldable CaseStatement where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor CaseStatement where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable CaseStatement where
  traverse = AST.Traversable1.Class.traverseDefault1

data CastExpression a = CastExpression
  { ann :: a,
    type' :: (AST.Parse.Err (TypeDescriptor a)),
    value :: (AST.Parse.Err (Expression a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_153.
      AST.Traversable1.Class.Traversable1 a_153
    )

instance AST.Unmarshal.SymbolMatching CastExpression where
  matchedSymbols _ = [215]
  showFailure _ node_154 =
    "expected "
      GHC.Base.<> ( "cast_expression"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_154 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_154) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_155 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_156 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_157 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_158 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_155
        c1_156 = TreeSitter.Node.nodeStartPoint node_154
      TreeSitter.Node.TSPoint
        r2_157
        c2_158 = TreeSitter.Node.nodeEndPoint node_154

deriving instance GHC.Classes.Eq a_159 => GHC.Classes.Eq (CastExpression a_159)

deriving instance GHC.Classes.Ord a_160 => GHC.Classes.Ord (CastExpression a_160)

deriving instance GHC.Show.Show a_161 => GHC.Show.Show (CastExpression a_161)

instance AST.Unmarshal.Unmarshal CastExpression

instance Data.Foldable.Foldable CastExpression where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor CastExpression where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable CastExpression where
  traverse = AST.Traversable1.Class.traverseDefault1

data CharLiteral a = CharLiteral
  { ann :: a,
    extraChildren :: (GHC.Maybe.Maybe (AST.Parse.Err (EscapeSequence a)))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_162.
      AST.Traversable1.Class.Traversable1 a_162
    )

instance AST.Unmarshal.SymbolMatching CharLiteral where
  matchedSymbols _ = [228]
  showFailure _ node_163 =
    "expected "
      GHC.Base.<> ( "char_literal"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_163 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_163) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_164 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_165 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_166 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_167 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_164
        c1_165 = TreeSitter.Node.nodeStartPoint node_163
      TreeSitter.Node.TSPoint
        r2_166
        c2_167 = TreeSitter.Node.nodeEndPoint node_163

deriving instance GHC.Classes.Eq a_168 => GHC.Classes.Eq (CharLiteral a_168)

deriving instance GHC.Classes.Ord a_169 => GHC.Classes.Ord (CharLiteral a_169)

deriving instance GHC.Show.Show a_170 => GHC.Show.Show (CharLiteral a_170)

instance AST.Unmarshal.Unmarshal CharLiteral

instance Data.Foldable.Foldable CharLiteral where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor CharLiteral where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable CharLiteral where
  traverse = AST.Traversable1.Class.traverseDefault1

data CommaExpression a = CommaExpression
  { ann :: a,
    right :: (AST.Parse.Err ((Expression GHC.Generics.:+: CommaExpression) a)),
    left :: (AST.Parse.Err (Expression a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_171.
      AST.Traversable1.Class.Traversable1 a_171
    )

instance AST.Unmarshal.SymbolMatching CommaExpression where
  matchedSymbols _ = [208]
  showFailure _ node_172 =
    "expected "
      GHC.Base.<> ( "comma_expression"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_172 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_172) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_173 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_174 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_175 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_176 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_173
        c1_174 = TreeSitter.Node.nodeStartPoint node_172
      TreeSitter.Node.TSPoint
        r2_175
        c2_176 = TreeSitter.Node.nodeEndPoint node_172

deriving instance GHC.Classes.Eq a_177 => GHC.Classes.Eq (CommaExpression a_177)

deriving instance GHC.Classes.Ord a_178 => GHC.Classes.Ord (CommaExpression a_178)

deriving instance GHC.Show.Show a_179 => GHC.Show.Show (CommaExpression a_179)

instance AST.Unmarshal.Unmarshal CommaExpression

instance Data.Foldable.Foldable CommaExpression where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor CommaExpression where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable CommaExpression where
  traverse = AST.Traversable1.Class.traverseDefault1

data CompoundLiteralExpression a = CompoundLiteralExpression
  { ann :: a,
    type' :: (AST.Parse.Err (TypeDescriptor a)),
    value :: (AST.Parse.Err (InitializerList a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_180.
      AST.Traversable1.Class.Traversable1 a_180
    )

instance AST.Unmarshal.SymbolMatching CompoundLiteralExpression where
  matchedSymbols _ = [222]
  showFailure _ node_181 =
    "expected "
      GHC.Base.<> ( "compound_literal_expression"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_181 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_181) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_182 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_183 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_184 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_185 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_182
        c1_183 = TreeSitter.Node.nodeStartPoint node_181
      TreeSitter.Node.TSPoint
        r2_184
        c2_185 = TreeSitter.Node.nodeEndPoint node_181

deriving instance GHC.Classes.Eq a_186 => GHC.Classes.Eq (CompoundLiteralExpression a_186)

deriving instance GHC.Classes.Ord a_187 => GHC.Classes.Ord (CompoundLiteralExpression a_187)

deriving instance GHC.Show.Show a_188 => GHC.Show.Show (CompoundLiteralExpression a_188)

instance AST.Unmarshal.Unmarshal CompoundLiteralExpression

instance Data.Foldable.Foldable CompoundLiteralExpression where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor CompoundLiteralExpression where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable CompoundLiteralExpression where
  traverse = AST.Traversable1.Class.traverseDefault1

data CompoundStatement a = CompoundStatement
  { ann :: a,
    extraChildren :: ([AST.Parse.Err ((Statement GHC.Generics.:+: TypeSpecifier GHC.Generics.:+: Declaration GHC.Generics.:+: FunctionDefinition GHC.Generics.:+: LinkageSpecification GHC.Generics.:+: PreprocCall GHC.Generics.:+: PreprocDef GHC.Generics.:+: PreprocFunctionDef GHC.Generics.:+: PreprocIf GHC.Generics.:+: PreprocIfdef GHC.Generics.:+: PreprocInclude GHC.Generics.:+: TypeDefinition) a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_189.
      AST.Traversable1.Class.Traversable1 a_189
    )

instance AST.Unmarshal.SymbolMatching CompoundStatement where
  matchedSymbols _ = [179]
  showFailure _ node_190 =
    "expected "
      GHC.Base.<> ( "compound_statement"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_190 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_190) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_191 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_192 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_193 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_194 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_191
        c1_192 = TreeSitter.Node.nodeStartPoint node_190
      TreeSitter.Node.TSPoint
        r2_193
        c2_194 = TreeSitter.Node.nodeEndPoint node_190

deriving instance GHC.Classes.Eq a_195 => GHC.Classes.Eq (CompoundStatement a_195)

deriving instance GHC.Classes.Ord a_196 => GHC.Classes.Ord (CompoundStatement a_196)

deriving instance GHC.Show.Show a_197 => GHC.Show.Show (CompoundStatement a_197)

instance AST.Unmarshal.Unmarshal CompoundStatement

instance Data.Foldable.Foldable CompoundStatement where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor CompoundStatement where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable CompoundStatement where
  traverse = AST.Traversable1.Class.traverseDefault1

data ConcatenatedString a = ConcatenatedString
  { ann :: a,
    extraChildren :: (GHC.Base.NonEmpty (AST.Parse.Err (StringLiteral a)))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_198.
      AST.Traversable1.Class.Traversable1 a_198
    )

instance AST.Unmarshal.SymbolMatching ConcatenatedString where
  matchedSymbols _ = [229]
  showFailure _ node_199 =
    "expected "
      GHC.Base.<> ( "concatenated_string"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_199 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_199) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_200 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_201 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_202 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_203 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_200
        c1_201 = TreeSitter.Node.nodeStartPoint node_199
      TreeSitter.Node.TSPoint
        r2_202
        c2_203 = TreeSitter.Node.nodeEndPoint node_199

deriving instance GHC.Classes.Eq a_204 => GHC.Classes.Eq (ConcatenatedString a_204)

deriving instance GHC.Classes.Ord a_205 => GHC.Classes.Ord (ConcatenatedString a_205)

deriving instance GHC.Show.Show a_206 => GHC.Show.Show (ConcatenatedString a_206)

instance AST.Unmarshal.Unmarshal ConcatenatedString

instance Data.Foldable.Foldable ConcatenatedString where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor ConcatenatedString where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable ConcatenatedString where
  traverse = AST.Traversable1.Class.traverseDefault1

data ConditionalExpression a = ConditionalExpression
  { ann :: a,
    alternative :: (AST.Parse.Err (Expression a)),
    condition :: (AST.Parse.Err (Expression a)),
    consequence :: (AST.Parse.Err (Expression a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_207.
      AST.Traversable1.Class.Traversable1 a_207
    )

instance AST.Unmarshal.SymbolMatching ConditionalExpression where
  matchedSymbols _ = [209]
  showFailure _ node_208 =
    "expected "
      GHC.Base.<> ( "conditional_expression"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_208 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_208) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_209 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_210 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_211 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_212 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_209
        c1_210 = TreeSitter.Node.nodeStartPoint node_208
      TreeSitter.Node.TSPoint
        r2_211
        c2_212 = TreeSitter.Node.nodeEndPoint node_208

deriving instance GHC.Classes.Eq a_213 => GHC.Classes.Eq (ConditionalExpression a_213)

deriving instance GHC.Classes.Ord a_214 => GHC.Classes.Ord (ConditionalExpression a_214)

deriving instance GHC.Show.Show a_215 => GHC.Show.Show (ConditionalExpression a_215)

instance AST.Unmarshal.Unmarshal ConditionalExpression

instance Data.Foldable.Foldable ConditionalExpression where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor ConditionalExpression where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable ConditionalExpression where
  traverse = AST.Traversable1.Class.traverseDefault1

data ContinueStatement a = ContinueStatement {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_216.
      AST.Traversable1.Class.Traversable1 a_216
    )

instance AST.Unmarshal.SymbolMatching ContinueStatement where
  matchedSymbols _ = [205]
  showFailure _ node_217 =
    "expected "
      GHC.Base.<> ( "continue_statement"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_217 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_217) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_218 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_219 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_220 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_221 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_218
        c1_219 = TreeSitter.Node.nodeStartPoint node_217
      TreeSitter.Node.TSPoint
        r2_220
        c2_221 = TreeSitter.Node.nodeEndPoint node_217

deriving instance GHC.Classes.Eq a_222 => GHC.Classes.Eq (ContinueStatement a_222)

deriving instance GHC.Classes.Ord a_223 => GHC.Classes.Ord (ContinueStatement a_223)

deriving instance GHC.Show.Show a_224 => GHC.Show.Show (ContinueStatement a_224)

instance AST.Unmarshal.Unmarshal ContinueStatement

instance Data.Foldable.Foldable ContinueStatement where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor ContinueStatement where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable ContinueStatement where
  traverse = AST.Traversable1.Class.traverseDefault1

data Declaration a = Declaration
  { ann :: a,
    type' :: (AST.Parse.Err (TypeSpecifier a)),
    declarator :: (GHC.Base.NonEmpty (AST.Parse.Err ((Declarator GHC.Generics.:+: InitDeclarator) a))),
    extraChildren :: ([AST.Parse.Err ((AttributeSpecifier GHC.Generics.:+: MsDeclspecModifier GHC.Generics.:+: StorageClassSpecifier GHC.Generics.:+: TypeQualifier) a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_225.
      AST.Traversable1.Class.Traversable1 a_225
    )

instance AST.Unmarshal.SymbolMatching Declaration where
  matchedSymbols _ = [147]
  showFailure _ node_226 =
    "expected "
      GHC.Base.<> ( "declaration"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_226 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_226) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_227 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_228 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_229 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_230 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_227
        c1_228 = TreeSitter.Node.nodeStartPoint node_226
      TreeSitter.Node.TSPoint
        r2_229
        c2_230 = TreeSitter.Node.nodeEndPoint node_226

deriving instance GHC.Classes.Eq a_231 => GHC.Classes.Eq (Declaration a_231)

deriving instance GHC.Classes.Ord a_232 => GHC.Classes.Ord (Declaration a_232)

deriving instance GHC.Show.Show a_233 => GHC.Show.Show (Declaration a_233)

instance AST.Unmarshal.Unmarshal Declaration

instance Data.Foldable.Foldable Declaration where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Declaration where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Declaration where
  traverse = AST.Traversable1.Class.traverseDefault1

data DeclarationList a = DeclarationList
  { ann :: a,
    extraChildren :: ([AST.Parse.Err ((Statement GHC.Generics.:+: TypeSpecifier GHC.Generics.:+: Declaration GHC.Generics.:+: FunctionDefinition GHC.Generics.:+: LinkageSpecification GHC.Generics.:+: PreprocCall GHC.Generics.:+: PreprocDef GHC.Generics.:+: PreprocFunctionDef GHC.Generics.:+: PreprocIf GHC.Generics.:+: PreprocIfdef GHC.Generics.:+: PreprocInclude GHC.Generics.:+: TypeDefinition) a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_234.
      AST.Traversable1.Class.Traversable1 a_234
    )

instance AST.Unmarshal.SymbolMatching DeclarationList where
  matchedSymbols _ = [157]
  showFailure _ node_235 =
    "expected "
      GHC.Base.<> ( "declaration_list"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_235 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_235) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_236 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_237 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_238 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_239 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_236
        c1_237 = TreeSitter.Node.nodeStartPoint node_235
      TreeSitter.Node.TSPoint
        r2_238
        c2_239 = TreeSitter.Node.nodeEndPoint node_235

deriving instance GHC.Classes.Eq a_240 => GHC.Classes.Eq (DeclarationList a_240)

deriving instance GHC.Classes.Ord a_241 => GHC.Classes.Ord (DeclarationList a_241)

deriving instance GHC.Show.Show a_242 => GHC.Show.Show (DeclarationList a_242)

instance AST.Unmarshal.Unmarshal DeclarationList

instance Data.Foldable.Foldable DeclarationList where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor DeclarationList where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable DeclarationList where
  traverse = AST.Traversable1.Class.traverseDefault1

data DoStatement a = DoStatement
  { ann :: a,
    condition :: (AST.Parse.Err (ParenthesizedExpression a)),
    body :: (AST.Parse.Err (Statement a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_243.
      AST.Traversable1.Class.Traversable1 a_243
    )

instance AST.Unmarshal.SymbolMatching DoStatement where
  matchedSymbols _ = [201]
  showFailure _ node_244 =
    "expected "
      GHC.Base.<> ( "do_statement"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_244 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_244) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_245 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_246 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_247 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_248 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_245
        c1_246 = TreeSitter.Node.nodeStartPoint node_244
      TreeSitter.Node.TSPoint
        r2_247
        c2_248 = TreeSitter.Node.nodeEndPoint node_244

deriving instance GHC.Classes.Eq a_249 => GHC.Classes.Eq (DoStatement a_249)

deriving instance GHC.Classes.Ord a_250 => GHC.Classes.Ord (DoStatement a_250)

deriving instance GHC.Show.Show a_251 => GHC.Show.Show (DoStatement a_251)

instance AST.Unmarshal.Unmarshal DoStatement

instance Data.Foldable.Foldable DoStatement where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor DoStatement where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable DoStatement where
  traverse = AST.Traversable1.Class.traverseDefault1

data EnumSpecifier a = EnumSpecifier
  { ann :: a,
    name :: (GHC.Maybe.Maybe (AST.Parse.Err (TypeIdentifier a))),
    body :: (GHC.Maybe.Maybe (AST.Parse.Err (EnumeratorList a)))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_252.
      AST.Traversable1.Class.Traversable1 a_252
    )

instance AST.Unmarshal.SymbolMatching EnumSpecifier where
  matchedSymbols _ = [184]
  showFailure _ node_253 =
    "expected "
      GHC.Base.<> ( "enum_specifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_253 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_253) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_254 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_255 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_256 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_257 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_254
        c1_255 = TreeSitter.Node.nodeStartPoint node_253
      TreeSitter.Node.TSPoint
        r2_256
        c2_257 = TreeSitter.Node.nodeEndPoint node_253

deriving instance GHC.Classes.Eq a_258 => GHC.Classes.Eq (EnumSpecifier a_258)

deriving instance GHC.Classes.Ord a_259 => GHC.Classes.Ord (EnumSpecifier a_259)

deriving instance GHC.Show.Show a_260 => GHC.Show.Show (EnumSpecifier a_260)

instance AST.Unmarshal.Unmarshal EnumSpecifier

instance Data.Foldable.Foldable EnumSpecifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor EnumSpecifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable EnumSpecifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data Enumerator a = Enumerator
  { ann :: a,
    name :: (AST.Parse.Err (Identifier a)),
    value :: (GHC.Maybe.Maybe (AST.Parse.Err (Expression a)))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_261.
      AST.Traversable1.Class.Traversable1 a_261
    )

instance AST.Unmarshal.SymbolMatching Enumerator where
  matchedSymbols _ = [192]
  showFailure _ node_262 =
    "expected "
      GHC.Base.<> ( "enumerator"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_262 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_262) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_263 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_264 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_265 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_266 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_263
        c1_264 = TreeSitter.Node.nodeStartPoint node_262
      TreeSitter.Node.TSPoint
        r2_265
        c2_266 = TreeSitter.Node.nodeEndPoint node_262

deriving instance GHC.Classes.Eq a_267 => GHC.Classes.Eq (Enumerator a_267)

deriving instance GHC.Classes.Ord a_268 => GHC.Classes.Ord (Enumerator a_268)

deriving instance GHC.Show.Show a_269 => GHC.Show.Show (Enumerator a_269)

instance AST.Unmarshal.Unmarshal Enumerator

instance Data.Foldable.Foldable Enumerator where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Enumerator where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Enumerator where
  traverse = AST.Traversable1.Class.traverseDefault1

data EnumeratorList a = EnumeratorList
  { ann :: a,
    extraChildren :: ([AST.Parse.Err (Enumerator a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_270.
      AST.Traversable1.Class.Traversable1 a_270
    )

instance AST.Unmarshal.SymbolMatching EnumeratorList where
  matchedSymbols _ = [185]
  showFailure _ node_271 =
    "expected "
      GHC.Base.<> ( "enumerator_list"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_271 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_271) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_272 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_273 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_274 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_275 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_272
        c1_273 = TreeSitter.Node.nodeStartPoint node_271
      TreeSitter.Node.TSPoint
        r2_274
        c2_275 = TreeSitter.Node.nodeEndPoint node_271

deriving instance GHC.Classes.Eq a_276 => GHC.Classes.Eq (EnumeratorList a_276)

deriving instance GHC.Classes.Ord a_277 => GHC.Classes.Ord (EnumeratorList a_277)

deriving instance GHC.Show.Show a_278 => GHC.Show.Show (EnumeratorList a_278)

instance AST.Unmarshal.Unmarshal EnumeratorList

instance Data.Foldable.Foldable EnumeratorList where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor EnumeratorList where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable EnumeratorList where
  traverse = AST.Traversable1.Class.traverseDefault1

data ExpressionStatement a = ExpressionStatement
  { ann :: a,
    extraChildren :: (GHC.Maybe.Maybe (AST.Parse.Err ((Expression GHC.Generics.:+: CommaExpression) a)))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_279.
      AST.Traversable1.Class.Traversable1 a_279
    )

instance AST.Unmarshal.SymbolMatching ExpressionStatement where
  matchedSymbols _ = [196]
  showFailure _ node_280 =
    "expected "
      GHC.Base.<> ( "expression_statement"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_280 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_280) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_281 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_282 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_283 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_284 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_281
        c1_282 = TreeSitter.Node.nodeStartPoint node_280
      TreeSitter.Node.TSPoint
        r2_283
        c2_284 = TreeSitter.Node.nodeEndPoint node_280

deriving instance GHC.Classes.Eq a_285 => GHC.Classes.Eq (ExpressionStatement a_285)

deriving instance GHC.Classes.Ord a_286 => GHC.Classes.Ord (ExpressionStatement a_286)

deriving instance GHC.Show.Show a_287 => GHC.Show.Show (ExpressionStatement a_287)

instance AST.Unmarshal.Unmarshal ExpressionStatement

instance Data.Foldable.Foldable ExpressionStatement where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor ExpressionStatement where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable ExpressionStatement where
  traverse = AST.Traversable1.Class.traverseDefault1

data FieldDeclaration a = FieldDeclaration
  { ann :: a,
    type' :: (AST.Parse.Err (TypeSpecifier a)),
    declarator :: ([AST.Parse.Err (FieldDeclarator a)]),
    extraChildren :: ([AST.Parse.Err ((AttributeSpecifier GHC.Generics.:+: BitfieldClause GHC.Generics.:+: MsDeclspecModifier GHC.Generics.:+: StorageClassSpecifier GHC.Generics.:+: TypeQualifier) a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_288.
      AST.Traversable1.Class.Traversable1 a_288
    )

instance AST.Unmarshal.SymbolMatching FieldDeclaration where
  matchedSymbols _ = [190]
  showFailure _ node_289 =
    "expected "
      GHC.Base.<> ( "field_declaration"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_289 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_289) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_290 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_291 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_292 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_293 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_290
        c1_291 = TreeSitter.Node.nodeStartPoint node_289
      TreeSitter.Node.TSPoint
        r2_292
        c2_293 = TreeSitter.Node.nodeEndPoint node_289

deriving instance GHC.Classes.Eq a_294 => GHC.Classes.Eq (FieldDeclaration a_294)

deriving instance GHC.Classes.Ord a_295 => GHC.Classes.Ord (FieldDeclaration a_295)

deriving instance GHC.Show.Show a_296 => GHC.Show.Show (FieldDeclaration a_296)

instance AST.Unmarshal.Unmarshal FieldDeclaration

instance Data.Foldable.Foldable FieldDeclaration where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor FieldDeclaration where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable FieldDeclaration where
  traverse = AST.Traversable1.Class.traverseDefault1

data FieldDeclarationList a = FieldDeclarationList
  { ann :: a,
    extraChildren :: ([AST.Parse.Err ((FieldDeclaration GHC.Generics.:+: PreprocCall GHC.Generics.:+: PreprocDef GHC.Generics.:+: PreprocFunctionDef GHC.Generics.:+: PreprocIf GHC.Generics.:+: PreprocIfdef) a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_297.
      AST.Traversable1.Class.Traversable1 a_297
    )

instance AST.Unmarshal.SymbolMatching FieldDeclarationList where
  matchedSymbols _ = [188]
  showFailure _ node_298 =
    "expected "
      GHC.Base.<> ( "field_declaration_list"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_298 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_298) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_299 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_300 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_301 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_302 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_299
        c1_300 = TreeSitter.Node.nodeStartPoint node_298
      TreeSitter.Node.TSPoint
        r2_301
        c2_302 = TreeSitter.Node.nodeEndPoint node_298

deriving instance GHC.Classes.Eq a_303 => GHC.Classes.Eq (FieldDeclarationList a_303)

deriving instance GHC.Classes.Ord a_304 => GHC.Classes.Ord (FieldDeclarationList a_304)

deriving instance GHC.Show.Show a_305 => GHC.Show.Show (FieldDeclarationList a_305)

instance AST.Unmarshal.Unmarshal FieldDeclarationList

instance Data.Foldable.Foldable FieldDeclarationList where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor FieldDeclarationList where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable FieldDeclarationList where
  traverse = AST.Traversable1.Class.traverseDefault1

data FieldDesignator a = FieldDesignator
  { ann :: a,
    extraChildren :: (AST.Parse.Err (FieldIdentifier a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_306.
      AST.Traversable1.Class.Traversable1 a_306
    )

instance AST.Unmarshal.SymbolMatching FieldDesignator where
  matchedSymbols _ = [227]
  showFailure _ node_307 =
    "expected "
      GHC.Base.<> ( "field_designator"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_307 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_307) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_308 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_309 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_310 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_311 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_308
        c1_309 = TreeSitter.Node.nodeStartPoint node_307
      TreeSitter.Node.TSPoint
        r2_310
        c2_311 = TreeSitter.Node.nodeEndPoint node_307

deriving instance GHC.Classes.Eq a_312 => GHC.Classes.Eq (FieldDesignator a_312)

deriving instance GHC.Classes.Ord a_313 => GHC.Classes.Ord (FieldDesignator a_313)

deriving instance GHC.Show.Show a_314 => GHC.Show.Show (FieldDesignator a_314)

instance AST.Unmarshal.Unmarshal FieldDesignator

instance Data.Foldable.Foldable FieldDesignator where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor FieldDesignator where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable FieldDesignator where
  traverse = AST.Traversable1.Class.traverseDefault1

data FieldExpression a = FieldExpression
  { ann :: a,
    argument :: (AST.Parse.Err (Expression a)),
    field :: (AST.Parse.Err (FieldIdentifier a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_315.
      AST.Traversable1.Class.Traversable1 a_315
    )

instance AST.Unmarshal.SymbolMatching FieldExpression where
  matchedSymbols _ = [221]
  showFailure _ node_316 =
    "expected "
      GHC.Base.<> ( "field_expression"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_316 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_316) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_317 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_318 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_319 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_320 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_317
        c1_318 = TreeSitter.Node.nodeStartPoint node_316
      TreeSitter.Node.TSPoint
        r2_319
        c2_320 = TreeSitter.Node.nodeEndPoint node_316

deriving instance GHC.Classes.Eq a_321 => GHC.Classes.Eq (FieldExpression a_321)

deriving instance GHC.Classes.Ord a_322 => GHC.Classes.Ord (FieldExpression a_322)

deriving instance GHC.Show.Show a_323 => GHC.Show.Show (FieldExpression a_323)

instance AST.Unmarshal.Unmarshal FieldExpression

instance Data.Foldable.Foldable FieldExpression where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor FieldExpression where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable FieldExpression where
  traverse = AST.Traversable1.Class.traverseDefault1

data ForStatement a = ForStatement
  { ann :: a,
    condition :: (GHC.Maybe.Maybe (AST.Parse.Err (Expression a))),
    initializer :: (GHC.Maybe.Maybe (AST.Parse.Err ((Expression GHC.Generics.:+: CommaExpression GHC.Generics.:+: Declaration) a))),
    update :: (GHC.Maybe.Maybe (AST.Parse.Err ((Expression GHC.Generics.:+: CommaExpression) a))),
    extraChildren :: (AST.Parse.Err (Statement a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_324.
      AST.Traversable1.Class.Traversable1 a_324
    )

instance AST.Unmarshal.SymbolMatching ForStatement where
  matchedSymbols _ = [202]
  showFailure _ node_325 =
    "expected "
      GHC.Base.<> ( "for_statement"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_325 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_325) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_326 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_327 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_328 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_329 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_326
        c1_327 = TreeSitter.Node.nodeStartPoint node_325
      TreeSitter.Node.TSPoint
        r2_328
        c2_329 = TreeSitter.Node.nodeEndPoint node_325

deriving instance GHC.Classes.Eq a_330 => GHC.Classes.Eq (ForStatement a_330)

deriving instance GHC.Classes.Ord a_331 => GHC.Classes.Ord (ForStatement a_331)

deriving instance GHC.Show.Show a_332 => GHC.Show.Show (ForStatement a_332)

instance AST.Unmarshal.Unmarshal ForStatement

instance Data.Foldable.Foldable ForStatement where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor ForStatement where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable ForStatement where
  traverse = AST.Traversable1.Class.traverseDefault1

data FunctionDeclarator a = FunctionDeclarator
  { ann :: a,
    declarator :: (AST.Parse.Err ((Declarator GHC.Generics.:+: FieldDeclarator GHC.Generics.:+: TypeDeclarator) a)),
    parameters :: (AST.Parse.Err (ParameterList a)),
    extraChildren :: ([AST.Parse.Err (AttributeSpecifier a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_333.
      AST.Traversable1.Class.Traversable1 a_333
    )

instance AST.Unmarshal.SymbolMatching FunctionDeclarator where
  matchedSymbols _ = [170, 171, 172]
  showFailure _ node_334 =
    "expected "
      GHC.Base.<> ( "function_declarator, function_declarator, function_declarator"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_334 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_334) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_335 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_336 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_337 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_338 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_335
        c1_336 = TreeSitter.Node.nodeStartPoint node_334
      TreeSitter.Node.TSPoint
        r2_337
        c2_338 = TreeSitter.Node.nodeEndPoint node_334

deriving instance GHC.Classes.Eq a_339 => GHC.Classes.Eq (FunctionDeclarator a_339)

deriving instance GHC.Classes.Ord a_340 => GHC.Classes.Ord (FunctionDeclarator a_340)

deriving instance GHC.Show.Show a_341 => GHC.Show.Show (FunctionDeclarator a_341)

instance AST.Unmarshal.Unmarshal FunctionDeclarator

instance Data.Foldable.Foldable FunctionDeclarator where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor FunctionDeclarator where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable FunctionDeclarator where
  traverse = AST.Traversable1.Class.traverseDefault1

data FunctionDefinition a = FunctionDefinition
  { ann :: a,
    type' :: (AST.Parse.Err (TypeSpecifier a)),
    declarator :: (AST.Parse.Err (Declarator a)),
    body :: (AST.Parse.Err (CompoundStatement a)),
    extraChildren :: ([AST.Parse.Err ((AttributeSpecifier GHC.Generics.:+: MsCallModifier GHC.Generics.:+: MsDeclspecModifier GHC.Generics.:+: StorageClassSpecifier GHC.Generics.:+: TypeQualifier) a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_342.
      AST.Traversable1.Class.Traversable1 a_342
    )

instance AST.Unmarshal.SymbolMatching FunctionDefinition where
  matchedSymbols _ = [146]
  showFailure _ node_343 =
    "expected "
      GHC.Base.<> ( "function_definition"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_343 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_343) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_344 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_345 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_346 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_347 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_344
        c1_345 = TreeSitter.Node.nodeStartPoint node_343
      TreeSitter.Node.TSPoint
        r2_346
        c2_347 = TreeSitter.Node.nodeEndPoint node_343

deriving instance GHC.Classes.Eq a_348 => GHC.Classes.Eq (FunctionDefinition a_348)

deriving instance GHC.Classes.Ord a_349 => GHC.Classes.Ord (FunctionDefinition a_349)

deriving instance GHC.Show.Show a_350 => GHC.Show.Show (FunctionDefinition a_350)

instance AST.Unmarshal.Unmarshal FunctionDefinition

instance Data.Foldable.Foldable FunctionDefinition where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor FunctionDefinition where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable FunctionDefinition where
  traverse = AST.Traversable1.Class.traverseDefault1

data GotoStatement a = GotoStatement
  { ann :: a,
    label :: (AST.Parse.Err (StatementIdentifier a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_351.
      AST.Traversable1.Class.Traversable1 a_351
    )

instance AST.Unmarshal.SymbolMatching GotoStatement where
  matchedSymbols _ = [206]
  showFailure _ node_352 =
    "expected "
      GHC.Base.<> ( "goto_statement"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_352 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_352) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_353 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_354 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_355 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_356 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_353
        c1_354 = TreeSitter.Node.nodeStartPoint node_352
      TreeSitter.Node.TSPoint
        r2_355
        c2_356 = TreeSitter.Node.nodeEndPoint node_352

deriving instance GHC.Classes.Eq a_357 => GHC.Classes.Eq (GotoStatement a_357)

deriving instance GHC.Classes.Ord a_358 => GHC.Classes.Ord (GotoStatement a_358)

deriving instance GHC.Show.Show a_359 => GHC.Show.Show (GotoStatement a_359)

instance AST.Unmarshal.Unmarshal GotoStatement

instance Data.Foldable.Foldable GotoStatement where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor GotoStatement where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable GotoStatement where
  traverse = AST.Traversable1.Class.traverseDefault1

data IfStatement a = IfStatement
  { ann :: a,
    alternative :: (GHC.Maybe.Maybe (AST.Parse.Err (Statement a))),
    condition :: (AST.Parse.Err (ParenthesizedExpression a)),
    consequence :: (AST.Parse.Err (Statement a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_360.
      AST.Traversable1.Class.Traversable1 a_360
    )

instance AST.Unmarshal.SymbolMatching IfStatement where
  matchedSymbols _ = [197]
  showFailure _ node_361 =
    "expected "
      GHC.Base.<> ( "if_statement"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_361 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_361) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_362 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_363 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_364 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_365 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_362
        c1_363 = TreeSitter.Node.nodeStartPoint node_361
      TreeSitter.Node.TSPoint
        r2_364
        c2_365 = TreeSitter.Node.nodeEndPoint node_361

deriving instance GHC.Classes.Eq a_366 => GHC.Classes.Eq (IfStatement a_366)

deriving instance GHC.Classes.Ord a_367 => GHC.Classes.Ord (IfStatement a_367)

deriving instance GHC.Show.Show a_368 => GHC.Show.Show (IfStatement a_368)

instance AST.Unmarshal.Unmarshal IfStatement

instance Data.Foldable.Foldable IfStatement where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor IfStatement where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable IfStatement where
  traverse = AST.Traversable1.Class.traverseDefault1

data InitDeclarator a = InitDeclarator
  { ann :: a,
    declarator :: (AST.Parse.Err (Declarator a)),
    value :: (AST.Parse.Err ((Expression GHC.Generics.:+: InitializerList) a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_369.
      AST.Traversable1.Class.Traversable1 a_369
    )

instance AST.Unmarshal.SymbolMatching InitDeclarator where
  matchedSymbols _ = [178]
  showFailure _ node_370 =
    "expected "
      GHC.Base.<> ( "init_declarator"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_370 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_370) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_371 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_372 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_373 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_374 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_371
        c1_372 = TreeSitter.Node.nodeStartPoint node_370
      TreeSitter.Node.TSPoint
        r2_373
        c2_374 = TreeSitter.Node.nodeEndPoint node_370

deriving instance GHC.Classes.Eq a_375 => GHC.Classes.Eq (InitDeclarator a_375)

deriving instance GHC.Classes.Ord a_376 => GHC.Classes.Ord (InitDeclarator a_376)

deriving instance GHC.Show.Show a_377 => GHC.Show.Show (InitDeclarator a_377)

instance AST.Unmarshal.Unmarshal InitDeclarator

instance Data.Foldable.Foldable InitDeclarator where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor InitDeclarator where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable InitDeclarator where
  traverse = AST.Traversable1.Class.traverseDefault1

data InitializerList a = InitializerList
  { ann :: a,
    extraChildren :: ([AST.Parse.Err ((Expression GHC.Generics.:+: InitializerList GHC.Generics.:+: InitializerPair) a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_378.
      AST.Traversable1.Class.Traversable1 a_378
    )

instance AST.Unmarshal.SymbolMatching InitializerList where
  matchedSymbols _ = [224]
  showFailure _ node_379 =
    "expected "
      GHC.Base.<> ( "initializer_list"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_379 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_379) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_380 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_381 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_382 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_383 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_380
        c1_381 = TreeSitter.Node.nodeStartPoint node_379
      TreeSitter.Node.TSPoint
        r2_382
        c2_383 = TreeSitter.Node.nodeEndPoint node_379

deriving instance GHC.Classes.Eq a_384 => GHC.Classes.Eq (InitializerList a_384)

deriving instance GHC.Classes.Ord a_385 => GHC.Classes.Ord (InitializerList a_385)

deriving instance GHC.Show.Show a_386 => GHC.Show.Show (InitializerList a_386)

instance AST.Unmarshal.Unmarshal InitializerList

instance Data.Foldable.Foldable InitializerList where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor InitializerList where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable InitializerList where
  traverse = AST.Traversable1.Class.traverseDefault1

data InitializerPair a = InitializerPair
  { ann :: a,
    designator :: (AST.Parse.Err ((FieldDesignator GHC.Generics.:+: SubscriptDesignator) a)),
    value :: (AST.Parse.Err ((Expression GHC.Generics.:+: InitializerList) a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_387.
      AST.Traversable1.Class.Traversable1 a_387
    )

instance AST.Unmarshal.SymbolMatching InitializerPair where
  matchedSymbols _ = [225]
  showFailure _ node_388 =
    "expected "
      GHC.Base.<> ( "initializer_pair"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_388 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_388) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_389 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_390 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_391 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_392 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_389
        c1_390 = TreeSitter.Node.nodeStartPoint node_388
      TreeSitter.Node.TSPoint
        r2_391
        c2_392 = TreeSitter.Node.nodeEndPoint node_388

deriving instance GHC.Classes.Eq a_393 => GHC.Classes.Eq (InitializerPair a_393)

deriving instance GHC.Classes.Ord a_394 => GHC.Classes.Ord (InitializerPair a_394)

deriving instance GHC.Show.Show a_395 => GHC.Show.Show (InitializerPair a_395)

instance AST.Unmarshal.Unmarshal InitializerPair

instance Data.Foldable.Foldable InitializerPair where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor InitializerPair where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable InitializerPair where
  traverse = AST.Traversable1.Class.traverseDefault1

data LabeledStatement a = LabeledStatement
  { ann :: a,
    label :: (AST.Parse.Err (StatementIdentifier a)),
    extraChildren :: (AST.Parse.Err (Statement a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_396.
      AST.Traversable1.Class.Traversable1 a_396
    )

instance AST.Unmarshal.SymbolMatching LabeledStatement where
  matchedSymbols _ = [195]
  showFailure _ node_397 =
    "expected "
      GHC.Base.<> ( "labeled_statement"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_397 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_397) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_398 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_399 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_400 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_401 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_398
        c1_399 = TreeSitter.Node.nodeStartPoint node_397
      TreeSitter.Node.TSPoint
        r2_400
        c2_401 = TreeSitter.Node.nodeEndPoint node_397

deriving instance GHC.Classes.Eq a_402 => GHC.Classes.Eq (LabeledStatement a_402)

deriving instance GHC.Classes.Ord a_403 => GHC.Classes.Ord (LabeledStatement a_403)

deriving instance GHC.Show.Show a_404 => GHC.Show.Show (LabeledStatement a_404)

instance AST.Unmarshal.Unmarshal LabeledStatement

instance Data.Foldable.Foldable LabeledStatement where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor LabeledStatement where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable LabeledStatement where
  traverse = AST.Traversable1.Class.traverseDefault1

data LinkageSpecification a = LinkageSpecification
  { ann :: a,
    body :: (AST.Parse.Err ((Declaration GHC.Generics.:+: DeclarationList GHC.Generics.:+: FunctionDefinition) a)),
    value :: (AST.Parse.Err (StringLiteral a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_405.
      AST.Traversable1.Class.Traversable1 a_405
    )

instance AST.Unmarshal.SymbolMatching LinkageSpecification where
  matchedSymbols _ = [150]
  showFailure _ node_406 =
    "expected "
      GHC.Base.<> ( "linkage_specification"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_406 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_406) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_407 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_408 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_409 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_410 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_407
        c1_408 = TreeSitter.Node.nodeStartPoint node_406
      TreeSitter.Node.TSPoint
        r2_409
        c2_410 = TreeSitter.Node.nodeEndPoint node_406

deriving instance GHC.Classes.Eq a_411 => GHC.Classes.Eq (LinkageSpecification a_411)

deriving instance GHC.Classes.Ord a_412 => GHC.Classes.Ord (LinkageSpecification a_412)

deriving instance GHC.Show.Show a_413 => GHC.Show.Show (LinkageSpecification a_413)

instance AST.Unmarshal.Unmarshal LinkageSpecification

instance Data.Foldable.Foldable LinkageSpecification where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor LinkageSpecification where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable LinkageSpecification where
  traverse = AST.Traversable1.Class.traverseDefault1

data MacroTypeSpecifier a = MacroTypeSpecifier
  { ann :: a,
    name :: (AST.Parse.Err (Identifier a)),
    type' :: (AST.Parse.Err (TypeDescriptor a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_414.
      AST.Traversable1.Class.Traversable1 a_414
    )

instance AST.Unmarshal.SymbolMatching MacroTypeSpecifier where
  matchedSymbols _ = [232]
  showFailure _ node_415 =
    "expected "
      GHC.Base.<> ( "macro_type_specifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_415 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_415) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_416 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_417 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_418 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_419 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_416
        c1_417 = TreeSitter.Node.nodeStartPoint node_415
      TreeSitter.Node.TSPoint
        r2_418
        c2_419 = TreeSitter.Node.nodeEndPoint node_415

deriving instance GHC.Classes.Eq a_420 => GHC.Classes.Eq (MacroTypeSpecifier a_420)

deriving instance GHC.Classes.Ord a_421 => GHC.Classes.Ord (MacroTypeSpecifier a_421)

deriving instance GHC.Show.Show a_422 => GHC.Show.Show (MacroTypeSpecifier a_422)

instance AST.Unmarshal.Unmarshal MacroTypeSpecifier

instance Data.Foldable.Foldable MacroTypeSpecifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor MacroTypeSpecifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable MacroTypeSpecifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data MsBasedModifier a = MsBasedModifier
  { ann :: a,
    extraChildren :: (AST.Parse.Err (ArgumentList a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_423.
      AST.Traversable1.Class.Traversable1 a_423
    )

instance AST.Unmarshal.SymbolMatching MsBasedModifier where
  matchedSymbols _ = [153]
  showFailure _ node_424 =
    "expected "
      GHC.Base.<> ( "ms_based_modifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_424 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_424) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_425 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_426 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_427 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_428 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_425
        c1_426 = TreeSitter.Node.nodeStartPoint node_424
      TreeSitter.Node.TSPoint
        r2_427
        c2_428 = TreeSitter.Node.nodeEndPoint node_424

deriving instance GHC.Classes.Eq a_429 => GHC.Classes.Eq (MsBasedModifier a_429)

deriving instance GHC.Classes.Ord a_430 => GHC.Classes.Ord (MsBasedModifier a_430)

deriving instance GHC.Show.Show a_431 => GHC.Show.Show (MsBasedModifier a_431)

instance AST.Unmarshal.Unmarshal MsBasedModifier

instance Data.Foldable.Foldable MsBasedModifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor MsBasedModifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable MsBasedModifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data MsCallModifier a = MsCallModifier {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_432.
      AST.Traversable1.Class.Traversable1 a_432
    )

instance AST.Unmarshal.SymbolMatching MsCallModifier where
  matchedSymbols _ = [154]
  showFailure _ node_433 =
    "expected "
      GHC.Base.<> ( "ms_call_modifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_433 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_433) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_434 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_435 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_436 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_437 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_434
        c1_435 = TreeSitter.Node.nodeStartPoint node_433
      TreeSitter.Node.TSPoint
        r2_436
        c2_437 = TreeSitter.Node.nodeEndPoint node_433

deriving instance GHC.Classes.Eq a_438 => GHC.Classes.Eq (MsCallModifier a_438)

deriving instance GHC.Classes.Ord a_439 => GHC.Classes.Ord (MsCallModifier a_439)

deriving instance GHC.Show.Show a_440 => GHC.Show.Show (MsCallModifier a_440)

instance AST.Unmarshal.Unmarshal MsCallModifier

instance Data.Foldable.Foldable MsCallModifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor MsCallModifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable MsCallModifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data MsDeclspecModifier a = MsDeclspecModifier
  { ann :: a,
    extraChildren :: (AST.Parse.Err (Identifier a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_441.
      AST.Traversable1.Class.Traversable1 a_441
    )

instance AST.Unmarshal.SymbolMatching MsDeclspecModifier where
  matchedSymbols _ = [152]
  showFailure _ node_442 =
    "expected "
      GHC.Base.<> ( "ms_declspec_modifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_442 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_442) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_443 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_444 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_445 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_446 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_443
        c1_444 = TreeSitter.Node.nodeStartPoint node_442
      TreeSitter.Node.TSPoint
        r2_445
        c2_446 = TreeSitter.Node.nodeEndPoint node_442

deriving instance GHC.Classes.Eq a_447 => GHC.Classes.Eq (MsDeclspecModifier a_447)

deriving instance GHC.Classes.Ord a_448 => GHC.Classes.Ord (MsDeclspecModifier a_448)

deriving instance GHC.Show.Show a_449 => GHC.Show.Show (MsDeclspecModifier a_449)

instance AST.Unmarshal.Unmarshal MsDeclspecModifier

instance Data.Foldable.Foldable MsDeclspecModifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor MsDeclspecModifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable MsDeclspecModifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data MsPointerModifier a = MsPointerModifier
  { ann :: a,
    extraChildren :: (AST.Parse.Err ((MsRestrictModifier GHC.Generics.:+: MsSignedPtrModifier GHC.Generics.:+: MsUnalignedPtrModifier GHC.Generics.:+: MsUnsignedPtrModifier) a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_450.
      AST.Traversable1.Class.Traversable1 a_450
    )

instance AST.Unmarshal.SymbolMatching MsPointerModifier where
  matchedSymbols _ = [156]
  showFailure _ node_451 =
    "expected "
      GHC.Base.<> ( "ms_pointer_modifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_451 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_451) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_452 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_453 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_454 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_455 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_452
        c1_453 = TreeSitter.Node.nodeStartPoint node_451
      TreeSitter.Node.TSPoint
        r2_454
        c2_455 = TreeSitter.Node.nodeEndPoint node_451

deriving instance GHC.Classes.Eq a_456 => GHC.Classes.Eq (MsPointerModifier a_456)

deriving instance GHC.Classes.Ord a_457 => GHC.Classes.Ord (MsPointerModifier a_457)

deriving instance GHC.Show.Show a_458 => GHC.Show.Show (MsPointerModifier a_458)

instance AST.Unmarshal.Unmarshal MsPointerModifier

instance Data.Foldable.Foldable MsPointerModifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor MsPointerModifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable MsPointerModifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data MsUnalignedPtrModifier a = MsUnalignedPtrModifier
  { ann :: a,
    text :: Data.Text.Internal.Text
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_459.
      AST.Traversable1.Class.Traversable1 a_459
    )

instance AST.Unmarshal.SymbolMatching MsUnalignedPtrModifier where
  matchedSymbols _ = [155]
  showFailure _ node_460 =
    "expected "
      GHC.Base.<> ( "ms_unaligned_ptr_modifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_460 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_460) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_461 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_462 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_463 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_464 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_461
        c1_462 = TreeSitter.Node.nodeStartPoint node_460
      TreeSitter.Node.TSPoint
        r2_463
        c2_464 = TreeSitter.Node.nodeEndPoint node_460

deriving instance GHC.Classes.Eq a_465 => GHC.Classes.Eq (MsUnalignedPtrModifier a_465)

deriving instance GHC.Classes.Ord a_466 => GHC.Classes.Ord (MsUnalignedPtrModifier a_466)

deriving instance GHC.Show.Show a_467 => GHC.Show.Show (MsUnalignedPtrModifier a_467)

instance AST.Unmarshal.Unmarshal MsUnalignedPtrModifier

instance Data.Foldable.Foldable MsUnalignedPtrModifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor MsUnalignedPtrModifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable MsUnalignedPtrModifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data ParameterDeclaration a = ParameterDeclaration
  { ann :: a,
    type' :: (AST.Parse.Err (TypeSpecifier a)),
    declarator :: (GHC.Maybe.Maybe (AST.Parse.Err ((AbstractDeclarator GHC.Generics.:+: Declarator) a))),
    extraChildren :: ([AST.Parse.Err ((AttributeSpecifier GHC.Generics.:+: MsDeclspecModifier GHC.Generics.:+: StorageClassSpecifier GHC.Generics.:+: TypeQualifier) a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_468.
      AST.Traversable1.Class.Traversable1 a_468
    )

instance AST.Unmarshal.SymbolMatching ParameterDeclaration where
  matchedSymbols _ = [194]
  showFailure _ node_469 =
    "expected "
      GHC.Base.<> ( "parameter_declaration"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_469 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_469) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_470 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_471 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_472 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_473 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_470
        c1_471 = TreeSitter.Node.nodeStartPoint node_469
      TreeSitter.Node.TSPoint
        r2_472
        c2_473 = TreeSitter.Node.nodeEndPoint node_469

deriving instance GHC.Classes.Eq a_474 => GHC.Classes.Eq (ParameterDeclaration a_474)

deriving instance GHC.Classes.Ord a_475 => GHC.Classes.Ord (ParameterDeclaration a_475)

deriving instance GHC.Show.Show a_476 => GHC.Show.Show (ParameterDeclaration a_476)

instance AST.Unmarshal.Unmarshal ParameterDeclaration

instance Data.Foldable.Foldable ParameterDeclaration where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor ParameterDeclaration where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable ParameterDeclaration where
  traverse = AST.Traversable1.Class.traverseDefault1

data ParameterList a = ParameterList
  { ann :: a,
    extraChildren :: ([AST.Parse.Err (ParameterDeclaration a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_477.
      AST.Traversable1.Class.Traversable1 a_477
    )

instance AST.Unmarshal.SymbolMatching ParameterList where
  matchedSymbols _ = [193]
  showFailure _ node_478 =
    "expected "
      GHC.Base.<> ( "parameter_list"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_478 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_478) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_479 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_480 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_481 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_482 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_479
        c1_480 = TreeSitter.Node.nodeStartPoint node_478
      TreeSitter.Node.TSPoint
        r2_481
        c2_482 = TreeSitter.Node.nodeEndPoint node_478

deriving instance GHC.Classes.Eq a_483 => GHC.Classes.Eq (ParameterList a_483)

deriving instance GHC.Classes.Ord a_484 => GHC.Classes.Ord (ParameterList a_484)

deriving instance GHC.Show.Show a_485 => GHC.Show.Show (ParameterList a_485)

instance AST.Unmarshal.Unmarshal ParameterList

instance Data.Foldable.Foldable ParameterList where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor ParameterList where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable ParameterList where
  traverse = AST.Traversable1.Class.traverseDefault1

data ParenthesizedDeclarator a = ParenthesizedDeclarator
  { ann :: a,
    extraChildren :: (AST.Parse.Err ((Declarator GHC.Generics.:+: FieldDeclarator GHC.Generics.:+: TypeDeclarator) a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_486.
      AST.Traversable1.Class.Traversable1 a_486
    )

instance AST.Unmarshal.SymbolMatching ParenthesizedDeclarator where
  matchedSymbols _ = [162, 163, 164]
  showFailure _ node_487 =
    "expected "
      GHC.Base.<> ( "parenthesized_declarator, parenthesized_declarator, parenthesized_declarator"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_487 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_487) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_488 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_489 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_490 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_491 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_488
        c1_489 = TreeSitter.Node.nodeStartPoint node_487
      TreeSitter.Node.TSPoint
        r2_490
        c2_491 = TreeSitter.Node.nodeEndPoint node_487

deriving instance GHC.Classes.Eq a_492 => GHC.Classes.Eq (ParenthesizedDeclarator a_492)

deriving instance GHC.Classes.Ord a_493 => GHC.Classes.Ord (ParenthesizedDeclarator a_493)

deriving instance GHC.Show.Show a_494 => GHC.Show.Show (ParenthesizedDeclarator a_494)

instance AST.Unmarshal.Unmarshal ParenthesizedDeclarator

instance Data.Foldable.Foldable ParenthesizedDeclarator where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor ParenthesizedDeclarator where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable ParenthesizedDeclarator where
  traverse = AST.Traversable1.Class.traverseDefault1

data ParenthesizedExpression a = ParenthesizedExpression
  { ann :: a,
    extraChildren :: (AST.Parse.Err ((Expression GHC.Generics.:+: CommaExpression GHC.Generics.:+: PreprocDefined) a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_495.
      AST.Traversable1.Class.Traversable1 a_495
    )

instance AST.Unmarshal.SymbolMatching ParenthesizedExpression where
  matchedSymbols _ = [140, 223]
  showFailure _ node_496 =
    "expected "
      GHC.Base.<> ( "parenthesized_expression, parenthesized_expression"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_496 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_496) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_497 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_498 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_499 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_500 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_497
        c1_498 = TreeSitter.Node.nodeStartPoint node_496
      TreeSitter.Node.TSPoint
        r2_499
        c2_500 = TreeSitter.Node.nodeEndPoint node_496

deriving instance GHC.Classes.Eq a_501 => GHC.Classes.Eq (ParenthesizedExpression a_501)

deriving instance GHC.Classes.Ord a_502 => GHC.Classes.Ord (ParenthesizedExpression a_502)

deriving instance GHC.Show.Show a_503 => GHC.Show.Show (ParenthesizedExpression a_503)

instance AST.Unmarshal.Unmarshal ParenthesizedExpression

instance Data.Foldable.Foldable ParenthesizedExpression where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor ParenthesizedExpression where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable ParenthesizedExpression where
  traverse = AST.Traversable1.Class.traverseDefault1

data PointerDeclarator a = PointerDeclarator
  { ann :: a,
    declarator :: (AST.Parse.Err ((Declarator GHC.Generics.:+: FieldDeclarator GHC.Generics.:+: TypeDeclarator) a)),
    extraChildren :: ([AST.Parse.Err ((MsBasedModifier GHC.Generics.:+: MsPointerModifier GHC.Generics.:+: TypeQualifier) a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_504.
      AST.Traversable1.Class.Traversable1 a_504
    )

instance AST.Unmarshal.SymbolMatching PointerDeclarator where
  matchedSymbols _ = [166, 167, 168]
  showFailure _ node_505 =
    "expected "
      GHC.Base.<> ( "pointer_declarator, pointer_declarator, pointer_declarator"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_505 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_505) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_506 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_507 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_508 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_509 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_506
        c1_507 = TreeSitter.Node.nodeStartPoint node_505
      TreeSitter.Node.TSPoint
        r2_508
        c2_509 = TreeSitter.Node.nodeEndPoint node_505

deriving instance GHC.Classes.Eq a_510 => GHC.Classes.Eq (PointerDeclarator a_510)

deriving instance GHC.Classes.Ord a_511 => GHC.Classes.Ord (PointerDeclarator a_511)

deriving instance GHC.Show.Show a_512 => GHC.Show.Show (PointerDeclarator a_512)

instance AST.Unmarshal.Unmarshal PointerDeclarator

instance Data.Foldable.Foldable PointerDeclarator where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor PointerDeclarator where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable PointerDeclarator where
  traverse = AST.Traversable1.Class.traverseDefault1

data PointerExpression a = PointerExpression
  { ann :: a,
    argument :: (AST.Parse.Err (Expression a)),
    operator :: (AST.Parse.Err ((AnonymousAmpersand GHC.Generics.:+: AnonymousStar) a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_513.
      AST.Traversable1.Class.Traversable1 a_513
    )

instance AST.Unmarshal.SymbolMatching PointerExpression where
  matchedSymbols _ = [211]
  showFailure _ node_514 =
    "expected "
      GHC.Base.<> ( "pointer_expression"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_514 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_514) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_515 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_516 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_517 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_518 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_515
        c1_516 = TreeSitter.Node.nodeStartPoint node_514
      TreeSitter.Node.TSPoint
        r2_517
        c2_518 = TreeSitter.Node.nodeEndPoint node_514

deriving instance GHC.Classes.Eq a_519 => GHC.Classes.Eq (PointerExpression a_519)

deriving instance GHC.Classes.Ord a_520 => GHC.Classes.Ord (PointerExpression a_520)

deriving instance GHC.Show.Show a_521 => GHC.Show.Show (PointerExpression a_521)

instance AST.Unmarshal.Unmarshal PointerExpression

instance Data.Foldable.Foldable PointerExpression where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor PointerExpression where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable PointerExpression where
  traverse = AST.Traversable1.Class.traverseDefault1

data PreprocCall a = PreprocCall
  { ann :: a,
    argument :: (GHC.Maybe.Maybe (AST.Parse.Err (PreprocArg a))),
    directive :: (AST.Parse.Err (PreprocDirective a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_522.
      AST.Traversable1.Class.Traversable1 a_522
    )

instance AST.Unmarshal.SymbolMatching PreprocCall where
  matchedSymbols _ = [130]
  showFailure _ node_523 =
    "expected "
      GHC.Base.<> ( "preproc_call"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_523 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_523) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_524 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_525 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_526 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_527 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_524
        c1_525 = TreeSitter.Node.nodeStartPoint node_523
      TreeSitter.Node.TSPoint
        r2_526
        c2_527 = TreeSitter.Node.nodeEndPoint node_523

deriving instance GHC.Classes.Eq a_528 => GHC.Classes.Eq (PreprocCall a_528)

deriving instance GHC.Classes.Ord a_529 => GHC.Classes.Ord (PreprocCall a_529)

deriving instance GHC.Show.Show a_530 => GHC.Show.Show (PreprocCall a_530)

instance AST.Unmarshal.Unmarshal PreprocCall

instance Data.Foldable.Foldable PreprocCall where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor PreprocCall where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable PreprocCall where
  traverse = AST.Traversable1.Class.traverseDefault1

data PreprocDef a = PreprocDef
  { ann :: a,
    name :: (AST.Parse.Err (Identifier a)),
    value :: (GHC.Maybe.Maybe (AST.Parse.Err (PreprocArg a)))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_531.
      AST.Traversable1.Class.Traversable1 a_531
    )

instance AST.Unmarshal.SymbolMatching PreprocDef where
  matchedSymbols _ = [127]
  showFailure _ node_532 =
    "expected "
      GHC.Base.<> ( "preproc_def"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_532 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_532) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_533 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_534 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_535 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_536 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_533
        c1_534 = TreeSitter.Node.nodeStartPoint node_532
      TreeSitter.Node.TSPoint
        r2_535
        c2_536 = TreeSitter.Node.nodeEndPoint node_532

deriving instance GHC.Classes.Eq a_537 => GHC.Classes.Eq (PreprocDef a_537)

deriving instance GHC.Classes.Ord a_538 => GHC.Classes.Ord (PreprocDef a_538)

deriving instance GHC.Show.Show a_539 => GHC.Show.Show (PreprocDef a_539)

instance AST.Unmarshal.Unmarshal PreprocDef

instance Data.Foldable.Foldable PreprocDef where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor PreprocDef where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable PreprocDef where
  traverse = AST.Traversable1.Class.traverseDefault1

data PreprocDefined a = PreprocDefined
  { ann :: a,
    extraChildren :: (AST.Parse.Err (Identifier a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_540.
      AST.Traversable1.Class.Traversable1 a_540
    )

instance AST.Unmarshal.SymbolMatching PreprocDefined where
  matchedSymbols _ = [141]
  showFailure _ node_541 =
    "expected "
      GHC.Base.<> ( "preproc_defined"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_541 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_541) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_542 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_543 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_544 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_545 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_542
        c1_543 = TreeSitter.Node.nodeStartPoint node_541
      TreeSitter.Node.TSPoint
        r2_544
        c2_545 = TreeSitter.Node.nodeEndPoint node_541

deriving instance GHC.Classes.Eq a_546 => GHC.Classes.Eq (PreprocDefined a_546)

deriving instance GHC.Classes.Ord a_547 => GHC.Classes.Ord (PreprocDefined a_547)

deriving instance GHC.Show.Show a_548 => GHC.Show.Show (PreprocDefined a_548)

instance AST.Unmarshal.Unmarshal PreprocDefined

instance Data.Foldable.Foldable PreprocDefined where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor PreprocDefined where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable PreprocDefined where
  traverse = AST.Traversable1.Class.traverseDefault1

data PreprocElif a = PreprocElif
  { ann :: a,
    alternative :: (GHC.Maybe.Maybe (AST.Parse.Err ((PreprocElif GHC.Generics.:+: PreprocElse) a))),
    condition :: (AST.Parse.Err ((BinaryExpression GHC.Generics.:+: CallExpression GHC.Generics.:+: CharLiteral GHC.Generics.:+: Identifier GHC.Generics.:+: NumberLiteral GHC.Generics.:+: ParenthesizedExpression GHC.Generics.:+: PreprocDefined GHC.Generics.:+: UnaryExpression) a)),
    extraChildren :: ([AST.Parse.Err ((Statement GHC.Generics.:+: TypeSpecifier GHC.Generics.:+: Declaration GHC.Generics.:+: FieldDeclaration GHC.Generics.:+: FunctionDefinition GHC.Generics.:+: LinkageSpecification GHC.Generics.:+: PreprocCall GHC.Generics.:+: PreprocDef GHC.Generics.:+: PreprocFunctionDef GHC.Generics.:+: PreprocIf GHC.Generics.:+: PreprocIfdef GHC.Generics.:+: PreprocInclude GHC.Generics.:+: TypeDefinition) a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_549.
      AST.Traversable1.Class.Traversable1 a_549
    )

instance AST.Unmarshal.SymbolMatching PreprocElif where
  matchedSymbols _ = [134, 138]
  showFailure _ node_550 =
    "expected "
      GHC.Base.<> ( "preproc_elif, preproc_elif"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_550 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_550) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_551 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_552 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_553 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_554 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_551
        c1_552 = TreeSitter.Node.nodeStartPoint node_550
      TreeSitter.Node.TSPoint
        r2_553
        c2_554 = TreeSitter.Node.nodeEndPoint node_550

deriving instance GHC.Classes.Eq a_555 => GHC.Classes.Eq (PreprocElif a_555)

deriving instance GHC.Classes.Ord a_556 => GHC.Classes.Ord (PreprocElif a_556)

deriving instance GHC.Show.Show a_557 => GHC.Show.Show (PreprocElif a_557)

instance AST.Unmarshal.Unmarshal PreprocElif

instance Data.Foldable.Foldable PreprocElif where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor PreprocElif where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable PreprocElif where
  traverse = AST.Traversable1.Class.traverseDefault1

data PreprocElse a = PreprocElse
  { ann :: a,
    extraChildren :: ([AST.Parse.Err ((Statement GHC.Generics.:+: TypeSpecifier GHC.Generics.:+: Declaration GHC.Generics.:+: FieldDeclaration GHC.Generics.:+: FunctionDefinition GHC.Generics.:+: LinkageSpecification GHC.Generics.:+: PreprocCall GHC.Generics.:+: PreprocDef GHC.Generics.:+: PreprocFunctionDef GHC.Generics.:+: PreprocIf GHC.Generics.:+: PreprocIfdef GHC.Generics.:+: PreprocInclude GHC.Generics.:+: TypeDefinition) a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_558.
      AST.Traversable1.Class.Traversable1 a_558
    )

instance AST.Unmarshal.SymbolMatching PreprocElse where
  matchedSymbols _ = [133, 137]
  showFailure _ node_559 =
    "expected "
      GHC.Base.<> ( "preproc_else, preproc_else"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_559 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_559) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_560 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_561 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_562 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_563 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_560
        c1_561 = TreeSitter.Node.nodeStartPoint node_559
      TreeSitter.Node.TSPoint
        r2_562
        c2_563 = TreeSitter.Node.nodeEndPoint node_559

deriving instance GHC.Classes.Eq a_564 => GHC.Classes.Eq (PreprocElse a_564)

deriving instance GHC.Classes.Ord a_565 => GHC.Classes.Ord (PreprocElse a_565)

deriving instance GHC.Show.Show a_566 => GHC.Show.Show (PreprocElse a_566)

instance AST.Unmarshal.Unmarshal PreprocElse

instance Data.Foldable.Foldable PreprocElse where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor PreprocElse where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable PreprocElse where
  traverse = AST.Traversable1.Class.traverseDefault1

data PreprocFunctionDef a = PreprocFunctionDef
  { ann :: a,
    name :: (AST.Parse.Err (Identifier a)),
    parameters :: (AST.Parse.Err (PreprocParams a)),
    value :: (GHC.Maybe.Maybe (AST.Parse.Err (PreprocArg a)))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_567.
      AST.Traversable1.Class.Traversable1 a_567
    )

instance AST.Unmarshal.SymbolMatching PreprocFunctionDef where
  matchedSymbols _ = [128]
  showFailure _ node_568 =
    "expected "
      GHC.Base.<> ( "preproc_function_def"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_568 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_568) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_569 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_570 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_571 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_572 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_569
        c1_570 = TreeSitter.Node.nodeStartPoint node_568
      TreeSitter.Node.TSPoint
        r2_571
        c2_572 = TreeSitter.Node.nodeEndPoint node_568

deriving instance GHC.Classes.Eq a_573 => GHC.Classes.Eq (PreprocFunctionDef a_573)

deriving instance GHC.Classes.Ord a_574 => GHC.Classes.Ord (PreprocFunctionDef a_574)

deriving instance GHC.Show.Show a_575 => GHC.Show.Show (PreprocFunctionDef a_575)

instance AST.Unmarshal.Unmarshal PreprocFunctionDef

instance Data.Foldable.Foldable PreprocFunctionDef where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor PreprocFunctionDef where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable PreprocFunctionDef where
  traverse = AST.Traversable1.Class.traverseDefault1

data PreprocIf a = PreprocIf
  { ann :: a,
    alternative :: (GHC.Maybe.Maybe (AST.Parse.Err ((PreprocElif GHC.Generics.:+: PreprocElse) a))),
    condition :: (AST.Parse.Err ((BinaryExpression GHC.Generics.:+: CallExpression GHC.Generics.:+: CharLiteral GHC.Generics.:+: Identifier GHC.Generics.:+: NumberLiteral GHC.Generics.:+: ParenthesizedExpression GHC.Generics.:+: PreprocDefined GHC.Generics.:+: UnaryExpression) a)),
    extraChildren :: ([AST.Parse.Err ((Statement GHC.Generics.:+: TypeSpecifier GHC.Generics.:+: Declaration GHC.Generics.:+: FieldDeclaration GHC.Generics.:+: FunctionDefinition GHC.Generics.:+: LinkageSpecification GHC.Generics.:+: PreprocCall GHC.Generics.:+: PreprocDef GHC.Generics.:+: PreprocFunctionDef GHC.Generics.:+: PreprocIf GHC.Generics.:+: PreprocIfdef GHC.Generics.:+: PreprocInclude GHC.Generics.:+: TypeDefinition) a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_576.
      AST.Traversable1.Class.Traversable1 a_576
    )

instance AST.Unmarshal.SymbolMatching PreprocIf where
  matchedSymbols _ = [131, 135]
  showFailure _ node_577 =
    "expected "
      GHC.Base.<> ( "preproc_if, preproc_if"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_577 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_577) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_578 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_579 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_580 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_581 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_578
        c1_579 = TreeSitter.Node.nodeStartPoint node_577
      TreeSitter.Node.TSPoint
        r2_580
        c2_581 = TreeSitter.Node.nodeEndPoint node_577

deriving instance GHC.Classes.Eq a_582 => GHC.Classes.Eq (PreprocIf a_582)

deriving instance GHC.Classes.Ord a_583 => GHC.Classes.Ord (PreprocIf a_583)

deriving instance GHC.Show.Show a_584 => GHC.Show.Show (PreprocIf a_584)

instance AST.Unmarshal.Unmarshal PreprocIf

instance Data.Foldable.Foldable PreprocIf where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor PreprocIf where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable PreprocIf where
  traverse = AST.Traversable1.Class.traverseDefault1

data PreprocIfdef a = PreprocIfdef
  { ann :: a,
    alternative :: (GHC.Maybe.Maybe (AST.Parse.Err ((PreprocElif GHC.Generics.:+: PreprocElse) a))),
    name :: (AST.Parse.Err (Identifier a)),
    extraChildren :: ([AST.Parse.Err ((Statement GHC.Generics.:+: TypeSpecifier GHC.Generics.:+: Declaration GHC.Generics.:+: FieldDeclaration GHC.Generics.:+: FunctionDefinition GHC.Generics.:+: LinkageSpecification GHC.Generics.:+: PreprocCall GHC.Generics.:+: PreprocDef GHC.Generics.:+: PreprocFunctionDef GHC.Generics.:+: PreprocIf GHC.Generics.:+: PreprocIfdef GHC.Generics.:+: PreprocInclude GHC.Generics.:+: TypeDefinition) a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_585.
      AST.Traversable1.Class.Traversable1 a_585
    )

instance AST.Unmarshal.SymbolMatching PreprocIfdef where
  matchedSymbols _ = [132, 136]
  showFailure _ node_586 =
    "expected "
      GHC.Base.<> ( "preproc_ifdef, preproc_ifdef"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_586 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_586) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_587 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_588 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_589 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_590 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_587
        c1_588 = TreeSitter.Node.nodeStartPoint node_586
      TreeSitter.Node.TSPoint
        r2_589
        c2_590 = TreeSitter.Node.nodeEndPoint node_586

deriving instance GHC.Classes.Eq a_591 => GHC.Classes.Eq (PreprocIfdef a_591)

deriving instance GHC.Classes.Ord a_592 => GHC.Classes.Ord (PreprocIfdef a_592)

deriving instance GHC.Show.Show a_593 => GHC.Show.Show (PreprocIfdef a_593)

instance AST.Unmarshal.Unmarshal PreprocIfdef

instance Data.Foldable.Foldable PreprocIfdef where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor PreprocIfdef where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable PreprocIfdef where
  traverse = AST.Traversable1.Class.traverseDefault1

data PreprocInclude a = PreprocInclude
  { ann :: a,
    path :: (AST.Parse.Err ((CallExpression GHC.Generics.:+: Identifier GHC.Generics.:+: StringLiteral GHC.Generics.:+: SystemLibString) a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_594.
      AST.Traversable1.Class.Traversable1 a_594
    )

instance AST.Unmarshal.SymbolMatching PreprocInclude where
  matchedSymbols _ = [126]
  showFailure _ node_595 =
    "expected "
      GHC.Base.<> ( "preproc_include"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_595 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_595) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_596 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_597 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_598 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_599 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_596
        c1_597 = TreeSitter.Node.nodeStartPoint node_595
      TreeSitter.Node.TSPoint
        r2_598
        c2_599 = TreeSitter.Node.nodeEndPoint node_595

deriving instance GHC.Classes.Eq a_600 => GHC.Classes.Eq (PreprocInclude a_600)

deriving instance GHC.Classes.Ord a_601 => GHC.Classes.Ord (PreprocInclude a_601)

deriving instance GHC.Show.Show a_602 => GHC.Show.Show (PreprocInclude a_602)

instance AST.Unmarshal.Unmarshal PreprocInclude

instance Data.Foldable.Foldable PreprocInclude where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor PreprocInclude where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable PreprocInclude where
  traverse = AST.Traversable1.Class.traverseDefault1

data PreprocParams a = PreprocParams
  { ann :: a,
    extraChildren :: ([AST.Parse.Err (Identifier a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_603.
      AST.Traversable1.Class.Traversable1 a_603
    )

instance AST.Unmarshal.SymbolMatching PreprocParams where
  matchedSymbols _ = [129]
  showFailure _ node_604 =
    "expected "
      GHC.Base.<> ( "preproc_params"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_604 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_604) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_605 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_606 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_607 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_608 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_605
        c1_606 = TreeSitter.Node.nodeStartPoint node_604
      TreeSitter.Node.TSPoint
        r2_607
        c2_608 = TreeSitter.Node.nodeEndPoint node_604

deriving instance GHC.Classes.Eq a_609 => GHC.Classes.Eq (PreprocParams a_609)

deriving instance GHC.Classes.Ord a_610 => GHC.Classes.Ord (PreprocParams a_610)

deriving instance GHC.Show.Show a_611 => GHC.Show.Show (PreprocParams a_611)

instance AST.Unmarshal.Unmarshal PreprocParams

instance Data.Foldable.Foldable PreprocParams where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor PreprocParams where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable PreprocParams where
  traverse = AST.Traversable1.Class.traverseDefault1

data ReturnStatement a = ReturnStatement
  { ann :: a,
    extraChildren :: (GHC.Maybe.Maybe (AST.Parse.Err ((Expression GHC.Generics.:+: CommaExpression) a)))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_612.
      AST.Traversable1.Class.Traversable1 a_612
    )

instance AST.Unmarshal.SymbolMatching ReturnStatement where
  matchedSymbols _ = [203]
  showFailure _ node_613 =
    "expected "
      GHC.Base.<> ( "return_statement"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_613 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_613) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_614 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_615 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_616 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_617 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_614
        c1_615 = TreeSitter.Node.nodeStartPoint node_613
      TreeSitter.Node.TSPoint
        r2_616
        c2_617 = TreeSitter.Node.nodeEndPoint node_613

deriving instance GHC.Classes.Eq a_618 => GHC.Classes.Eq (ReturnStatement a_618)

deriving instance GHC.Classes.Ord a_619 => GHC.Classes.Ord (ReturnStatement a_619)

deriving instance GHC.Show.Show a_620 => GHC.Show.Show (ReturnStatement a_620)

instance AST.Unmarshal.Unmarshal ReturnStatement

instance Data.Foldable.Foldable ReturnStatement where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor ReturnStatement where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable ReturnStatement where
  traverse = AST.Traversable1.Class.traverseDefault1

data SizedTypeSpecifier a = SizedTypeSpecifier
  { ann :: a,
    type' :: (GHC.Maybe.Maybe (AST.Parse.Err ((PrimitiveType GHC.Generics.:+: TypeIdentifier) a)))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_621.
      AST.Traversable1.Class.Traversable1 a_621
    )

instance AST.Unmarshal.SymbolMatching SizedTypeSpecifier where
  matchedSymbols _ = [183]
  showFailure _ node_622 =
    "expected "
      GHC.Base.<> ( "sized_type_specifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_622 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_622) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_623 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_624 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_625 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_626 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_623
        c1_624 = TreeSitter.Node.nodeStartPoint node_622
      TreeSitter.Node.TSPoint
        r2_625
        c2_626 = TreeSitter.Node.nodeEndPoint node_622

deriving instance GHC.Classes.Eq a_627 => GHC.Classes.Eq (SizedTypeSpecifier a_627)

deriving instance GHC.Classes.Ord a_628 => GHC.Classes.Ord (SizedTypeSpecifier a_628)

deriving instance GHC.Show.Show a_629 => GHC.Show.Show (SizedTypeSpecifier a_629)

instance AST.Unmarshal.Unmarshal SizedTypeSpecifier

instance Data.Foldable.Foldable SizedTypeSpecifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor SizedTypeSpecifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable SizedTypeSpecifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data SizeofExpression a = SizeofExpression
  { ann :: a,
    type' :: (GHC.Maybe.Maybe (AST.Parse.Err (TypeDescriptor a))),
    value :: (GHC.Maybe.Maybe (AST.Parse.Err (Expression a)))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_630.
      AST.Traversable1.Class.Traversable1 a_630
    )

instance AST.Unmarshal.SymbolMatching SizeofExpression where
  matchedSymbols _ = [217]
  showFailure _ node_631 =
    "expected "
      GHC.Base.<> ( "sizeof_expression"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_631 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_631) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_632 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_633 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_634 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_635 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_632
        c1_633 = TreeSitter.Node.nodeStartPoint node_631
      TreeSitter.Node.TSPoint
        r2_634
        c2_635 = TreeSitter.Node.nodeEndPoint node_631

deriving instance GHC.Classes.Eq a_636 => GHC.Classes.Eq (SizeofExpression a_636)

deriving instance GHC.Classes.Ord a_637 => GHC.Classes.Ord (SizeofExpression a_637)

deriving instance GHC.Show.Show a_638 => GHC.Show.Show (SizeofExpression a_638)

instance AST.Unmarshal.Unmarshal SizeofExpression

instance Data.Foldable.Foldable SizeofExpression where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor SizeofExpression where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable SizeofExpression where
  traverse = AST.Traversable1.Class.traverseDefault1

data StorageClassSpecifier a = StorageClassSpecifier {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_639.
      AST.Traversable1.Class.Traversable1 a_639
    )

instance AST.Unmarshal.SymbolMatching StorageClassSpecifier where
  matchedSymbols _ = [180]
  showFailure _ node_640 =
    "expected "
      GHC.Base.<> ( "storage_class_specifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_640 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_640) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_641 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_642 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_643 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_644 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_641
        c1_642 = TreeSitter.Node.nodeStartPoint node_640
      TreeSitter.Node.TSPoint
        r2_643
        c2_644 = TreeSitter.Node.nodeEndPoint node_640

deriving instance GHC.Classes.Eq a_645 => GHC.Classes.Eq (StorageClassSpecifier a_645)

deriving instance GHC.Classes.Ord a_646 => GHC.Classes.Ord (StorageClassSpecifier a_646)

deriving instance GHC.Show.Show a_647 => GHC.Show.Show (StorageClassSpecifier a_647)

instance AST.Unmarshal.Unmarshal StorageClassSpecifier

instance Data.Foldable.Foldable StorageClassSpecifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor StorageClassSpecifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable StorageClassSpecifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data StringLiteral a = StringLiteral
  { ann :: a,
    extraChildren :: ([AST.Parse.Err (EscapeSequence a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_648.
      AST.Traversable1.Class.Traversable1 a_648
    )

instance AST.Unmarshal.SymbolMatching StringLiteral where
  matchedSymbols _ = [230]
  showFailure _ node_649 =
    "expected "
      GHC.Base.<> ( "string_literal"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_649 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_649) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_650 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_651 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_652 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_653 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_650
        c1_651 = TreeSitter.Node.nodeStartPoint node_649
      TreeSitter.Node.TSPoint
        r2_652
        c2_653 = TreeSitter.Node.nodeEndPoint node_649

deriving instance GHC.Classes.Eq a_654 => GHC.Classes.Eq (StringLiteral a_654)

deriving instance GHC.Classes.Ord a_655 => GHC.Classes.Ord (StringLiteral a_655)

deriving instance GHC.Show.Show a_656 => GHC.Show.Show (StringLiteral a_656)

instance AST.Unmarshal.Unmarshal StringLiteral

instance Data.Foldable.Foldable StringLiteral where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor StringLiteral where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable StringLiteral where
  traverse = AST.Traversable1.Class.traverseDefault1

data StructSpecifier a = StructSpecifier
  { ann :: a,
    name :: (GHC.Maybe.Maybe (AST.Parse.Err (TypeIdentifier a))),
    body :: (GHC.Maybe.Maybe (AST.Parse.Err (FieldDeclarationList a))),
    extraChildren :: (GHC.Maybe.Maybe (AST.Parse.Err (MsDeclspecModifier a)))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_657.
      AST.Traversable1.Class.Traversable1 a_657
    )

instance AST.Unmarshal.SymbolMatching StructSpecifier where
  matchedSymbols _ = [186]
  showFailure _ node_658 =
    "expected "
      GHC.Base.<> ( "struct_specifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_658 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_658) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_659 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_660 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_661 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_662 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_659
        c1_660 = TreeSitter.Node.nodeStartPoint node_658
      TreeSitter.Node.TSPoint
        r2_661
        c2_662 = TreeSitter.Node.nodeEndPoint node_658

deriving instance GHC.Classes.Eq a_663 => GHC.Classes.Eq (StructSpecifier a_663)

deriving instance GHC.Classes.Ord a_664 => GHC.Classes.Ord (StructSpecifier a_664)

deriving instance GHC.Show.Show a_665 => GHC.Show.Show (StructSpecifier a_665)

instance AST.Unmarshal.Unmarshal StructSpecifier

instance Data.Foldable.Foldable StructSpecifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor StructSpecifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable StructSpecifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data SubscriptDesignator a = SubscriptDesignator
  { ann :: a,
    extraChildren :: (AST.Parse.Err (Expression a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_666.
      AST.Traversable1.Class.Traversable1 a_666
    )

instance AST.Unmarshal.SymbolMatching SubscriptDesignator where
  matchedSymbols _ = [226]
  showFailure _ node_667 =
    "expected "
      GHC.Base.<> ( "subscript_designator"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_667 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_667) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_668 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_669 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_670 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_671 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_668
        c1_669 = TreeSitter.Node.nodeStartPoint node_667
      TreeSitter.Node.TSPoint
        r2_670
        c2_671 = TreeSitter.Node.nodeEndPoint node_667

deriving instance GHC.Classes.Eq a_672 => GHC.Classes.Eq (SubscriptDesignator a_672)

deriving instance GHC.Classes.Ord a_673 => GHC.Classes.Ord (SubscriptDesignator a_673)

deriving instance GHC.Show.Show a_674 => GHC.Show.Show (SubscriptDesignator a_674)

instance AST.Unmarshal.Unmarshal SubscriptDesignator

instance Data.Foldable.Foldable SubscriptDesignator where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor SubscriptDesignator where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable SubscriptDesignator where
  traverse = AST.Traversable1.Class.traverseDefault1

data SubscriptExpression a = SubscriptExpression
  { ann :: a,
    argument :: (AST.Parse.Err (Expression a)),
    index :: (AST.Parse.Err (Expression a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_675.
      AST.Traversable1.Class.Traversable1 a_675
    )

instance AST.Unmarshal.SymbolMatching SubscriptExpression where
  matchedSymbols _ = [218]
  showFailure _ node_676 =
    "expected "
      GHC.Base.<> ( "subscript_expression"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_676 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_676) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_677 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_678 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_679 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_680 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_677
        c1_678 = TreeSitter.Node.nodeStartPoint node_676
      TreeSitter.Node.TSPoint
        r2_679
        c2_680 = TreeSitter.Node.nodeEndPoint node_676

deriving instance GHC.Classes.Eq a_681 => GHC.Classes.Eq (SubscriptExpression a_681)

deriving instance GHC.Classes.Ord a_682 => GHC.Classes.Ord (SubscriptExpression a_682)

deriving instance GHC.Show.Show a_683 => GHC.Show.Show (SubscriptExpression a_683)

instance AST.Unmarshal.Unmarshal SubscriptExpression

instance Data.Foldable.Foldable SubscriptExpression where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor SubscriptExpression where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable SubscriptExpression where
  traverse = AST.Traversable1.Class.traverseDefault1

data SwitchStatement a = SwitchStatement
  { ann :: a,
    condition :: (AST.Parse.Err (ParenthesizedExpression a)),
    body :: (AST.Parse.Err (CompoundStatement a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_684.
      AST.Traversable1.Class.Traversable1 a_684
    )

instance AST.Unmarshal.SymbolMatching SwitchStatement where
  matchedSymbols _ = [198]
  showFailure _ node_685 =
    "expected "
      GHC.Base.<> ( "switch_statement"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_685 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_685) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_686 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_687 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_688 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_689 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_686
        c1_687 = TreeSitter.Node.nodeStartPoint node_685
      TreeSitter.Node.TSPoint
        r2_688
        c2_689 = TreeSitter.Node.nodeEndPoint node_685

deriving instance GHC.Classes.Eq a_690 => GHC.Classes.Eq (SwitchStatement a_690)

deriving instance GHC.Classes.Ord a_691 => GHC.Classes.Ord (SwitchStatement a_691)

deriving instance GHC.Show.Show a_692 => GHC.Show.Show (SwitchStatement a_692)

instance AST.Unmarshal.Unmarshal SwitchStatement

instance Data.Foldable.Foldable SwitchStatement where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor SwitchStatement where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable SwitchStatement where
  traverse = AST.Traversable1.Class.traverseDefault1

data TranslationUnit a = TranslationUnit
  { ann :: a,
    extraChildren :: ([AST.Parse.Err ((Statement GHC.Generics.:+: TypeSpecifier GHC.Generics.:+: Declaration GHC.Generics.:+: FunctionDefinition GHC.Generics.:+: LinkageSpecification GHC.Generics.:+: PreprocCall GHC.Generics.:+: PreprocDef GHC.Generics.:+: PreprocFunctionDef GHC.Generics.:+: PreprocIf GHC.Generics.:+: PreprocIfdef GHC.Generics.:+: PreprocInclude GHC.Generics.:+: TypeDefinition) a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_693.
      AST.Traversable1.Class.Traversable1 a_693
    )

instance AST.Unmarshal.SymbolMatching TranslationUnit where
  matchedSymbols _ = [125]
  showFailure _ node_694 =
    "expected "
      GHC.Base.<> ( "translation_unit"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_694 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_694) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_695 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_696 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_697 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_698 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_695
        c1_696 = TreeSitter.Node.nodeStartPoint node_694
      TreeSitter.Node.TSPoint
        r2_697
        c2_698 = TreeSitter.Node.nodeEndPoint node_694

deriving instance GHC.Classes.Eq a_699 => GHC.Classes.Eq (TranslationUnit a_699)

deriving instance GHC.Classes.Ord a_700 => GHC.Classes.Ord (TranslationUnit a_700)

deriving instance GHC.Show.Show a_701 => GHC.Show.Show (TranslationUnit a_701)

instance AST.Unmarshal.Unmarshal TranslationUnit

instance Data.Foldable.Foldable TranslationUnit where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor TranslationUnit where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable TranslationUnit where
  traverse = AST.Traversable1.Class.traverseDefault1

data TypeDefinition a = TypeDefinition
  { ann :: a,
    type' :: (AST.Parse.Err (TypeSpecifier a)),
    declarator :: (GHC.Base.NonEmpty (AST.Parse.Err (TypeDeclarator a))),
    extraChildren :: ([AST.Parse.Err (TypeQualifier a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_702.
      AST.Traversable1.Class.Traversable1 a_702
    )

instance AST.Unmarshal.SymbolMatching TypeDefinition where
  matchedSymbols _ = [148]
  showFailure _ node_703 =
    "expected "
      GHC.Base.<> ( "type_definition"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_703 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_703) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_704 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_705 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_706 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_707 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_704
        c1_705 = TreeSitter.Node.nodeStartPoint node_703
      TreeSitter.Node.TSPoint
        r2_706
        c2_707 = TreeSitter.Node.nodeEndPoint node_703

deriving instance GHC.Classes.Eq a_708 => GHC.Classes.Eq (TypeDefinition a_708)

deriving instance GHC.Classes.Ord a_709 => GHC.Classes.Ord (TypeDefinition a_709)

deriving instance GHC.Show.Show a_710 => GHC.Show.Show (TypeDefinition a_710)

instance AST.Unmarshal.Unmarshal TypeDefinition

instance Data.Foldable.Foldable TypeDefinition where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor TypeDefinition where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable TypeDefinition where
  traverse = AST.Traversable1.Class.traverseDefault1

data TypeDescriptor a = TypeDescriptor
  { ann :: a,
    type' :: (AST.Parse.Err (TypeSpecifier a)),
    declarator :: (GHC.Maybe.Maybe (AST.Parse.Err (AbstractDeclarator a))),
    extraChildren :: ([AST.Parse.Err (TypeQualifier a)])
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_711.
      AST.Traversable1.Class.Traversable1 a_711
    )

instance AST.Unmarshal.SymbolMatching TypeDescriptor where
  matchedSymbols _ = [216]
  showFailure _ node_712 =
    "expected "
      GHC.Base.<> ( "type_descriptor"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_712 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_712) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_713 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_714 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_715 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_716 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_713
        c1_714 = TreeSitter.Node.nodeStartPoint node_712
      TreeSitter.Node.TSPoint
        r2_715
        c2_716 = TreeSitter.Node.nodeEndPoint node_712

deriving instance GHC.Classes.Eq a_717 => GHC.Classes.Eq (TypeDescriptor a_717)

deriving instance GHC.Classes.Ord a_718 => GHC.Classes.Ord (TypeDescriptor a_718)

deriving instance GHC.Show.Show a_719 => GHC.Show.Show (TypeDescriptor a_719)

instance AST.Unmarshal.Unmarshal TypeDescriptor

instance Data.Foldable.Foldable TypeDescriptor where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor TypeDescriptor where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable TypeDescriptor where
  traverse = AST.Traversable1.Class.traverseDefault1

data TypeQualifier a = TypeQualifier {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_720.
      AST.Traversable1.Class.Traversable1 a_720
    )

instance AST.Unmarshal.SymbolMatching TypeQualifier where
  matchedSymbols _ = [181]
  showFailure _ node_721 =
    "expected "
      GHC.Base.<> ( "type_qualifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_721 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_721) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_722 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_723 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_724 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_725 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_722
        c1_723 = TreeSitter.Node.nodeStartPoint node_721
      TreeSitter.Node.TSPoint
        r2_724
        c2_725 = TreeSitter.Node.nodeEndPoint node_721

deriving instance GHC.Classes.Eq a_726 => GHC.Classes.Eq (TypeQualifier a_726)

deriving instance GHC.Classes.Ord a_727 => GHC.Classes.Ord (TypeQualifier a_727)

deriving instance GHC.Show.Show a_728 => GHC.Show.Show (TypeQualifier a_728)

instance AST.Unmarshal.Unmarshal TypeQualifier

instance Data.Foldable.Foldable TypeQualifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor TypeQualifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable TypeQualifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data UnaryExpression a = UnaryExpression
  { ann :: a,
    argument :: (AST.Parse.Err ((Expression GHC.Generics.:+: PreprocDefined) a)),
    operator :: (AST.Parse.Err ((AnonymousBang GHC.Generics.:+: AnonymousPlus GHC.Generics.:+: AnonymousMinus GHC.Generics.:+: AnonymousTilde) a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_729.
      AST.Traversable1.Class.Traversable1 a_729
    )

instance AST.Unmarshal.SymbolMatching UnaryExpression where
  matchedSymbols _ = [142, 212]
  showFailure _ node_730 =
    "expected "
      GHC.Base.<> ( "unary_expression, unary_expression"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_730 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_730) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_731 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_732 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_733 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_734 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_731
        c1_732 = TreeSitter.Node.nodeStartPoint node_730
      TreeSitter.Node.TSPoint
        r2_733
        c2_734 = TreeSitter.Node.nodeEndPoint node_730

deriving instance GHC.Classes.Eq a_735 => GHC.Classes.Eq (UnaryExpression a_735)

deriving instance GHC.Classes.Ord a_736 => GHC.Classes.Ord (UnaryExpression a_736)

deriving instance GHC.Show.Show a_737 => GHC.Show.Show (UnaryExpression a_737)

instance AST.Unmarshal.Unmarshal UnaryExpression

instance Data.Foldable.Foldable UnaryExpression where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor UnaryExpression where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable UnaryExpression where
  traverse = AST.Traversable1.Class.traverseDefault1

data UnionSpecifier a = UnionSpecifier
  { ann :: a,
    name :: (GHC.Maybe.Maybe (AST.Parse.Err (TypeIdentifier a))),
    body :: (GHC.Maybe.Maybe (AST.Parse.Err (FieldDeclarationList a))),
    extraChildren :: (GHC.Maybe.Maybe (AST.Parse.Err (MsDeclspecModifier a)))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_738.
      AST.Traversable1.Class.Traversable1 a_738
    )

instance AST.Unmarshal.SymbolMatching UnionSpecifier where
  matchedSymbols _ = [187]
  showFailure _ node_739 =
    "expected "
      GHC.Base.<> ( "union_specifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_739 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_739) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_740 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_741 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_742 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_743 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_740
        c1_741 = TreeSitter.Node.nodeStartPoint node_739
      TreeSitter.Node.TSPoint
        r2_742
        c2_743 = TreeSitter.Node.nodeEndPoint node_739

deriving instance GHC.Classes.Eq a_744 => GHC.Classes.Eq (UnionSpecifier a_744)

deriving instance GHC.Classes.Ord a_745 => GHC.Classes.Ord (UnionSpecifier a_745)

deriving instance GHC.Show.Show a_746 => GHC.Show.Show (UnionSpecifier a_746)

instance AST.Unmarshal.Unmarshal UnionSpecifier

instance Data.Foldable.Foldable UnionSpecifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor UnionSpecifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable UnionSpecifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data UpdateExpression a = UpdateExpression
  { ann :: a,
    argument :: (AST.Parse.Err (Expression a)),
    operator :: (AST.Parse.Err ((AnonymousPlusPlus GHC.Generics.:+: AnonymousMinusMinus) a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_747.
      AST.Traversable1.Class.Traversable1 a_747
    )

instance AST.Unmarshal.SymbolMatching UpdateExpression where
  matchedSymbols _ = [214]
  showFailure _ node_748 =
    "expected "
      GHC.Base.<> ( "update_expression"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_748 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_748) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_749 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_750 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_751 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_752 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_749
        c1_750 = TreeSitter.Node.nodeStartPoint node_748
      TreeSitter.Node.TSPoint
        r2_751
        c2_752 = TreeSitter.Node.nodeEndPoint node_748

deriving instance GHC.Classes.Eq a_753 => GHC.Classes.Eq (UpdateExpression a_753)

deriving instance GHC.Classes.Ord a_754 => GHC.Classes.Ord (UpdateExpression a_754)

deriving instance GHC.Show.Show a_755 => GHC.Show.Show (UpdateExpression a_755)

instance AST.Unmarshal.Unmarshal UpdateExpression

instance Data.Foldable.Foldable UpdateExpression where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor UpdateExpression where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable UpdateExpression where
  traverse = AST.Traversable1.Class.traverseDefault1

data WhileStatement a = WhileStatement
  { ann :: a,
    condition :: (AST.Parse.Err (ParenthesizedExpression a)),
    body :: (AST.Parse.Err (Statement a))
  }
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_756.
      AST.Traversable1.Class.Traversable1 a_756
    )

instance AST.Unmarshal.SymbolMatching WhileStatement where
  matchedSymbols _ = [200]
  showFailure _ node_757 =
    "expected "
      GHC.Base.<> ( "while_statement"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_757 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_757) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_758 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_759 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_760 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_761 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_758
        c1_759 = TreeSitter.Node.nodeStartPoint node_757
      TreeSitter.Node.TSPoint
        r2_760
        c2_761 = TreeSitter.Node.nodeEndPoint node_757

deriving instance GHC.Classes.Eq a_762 => GHC.Classes.Eq (WhileStatement a_762)

deriving instance GHC.Classes.Ord a_763 => GHC.Classes.Ord (WhileStatement a_763)

deriving instance GHC.Show.Show a_764 => GHC.Show.Show (WhileStatement a_764)

instance AST.Unmarshal.Unmarshal WhileStatement

instance Data.Foldable.Foldable WhileStatement where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor WhileStatement where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable WhileStatement where
  traverse = AST.Traversable1.Class.traverseDefault1

type AnonymousLF = AST.Token.Token "\n" 3

type AnonymousBang = AST.Token.Token "!" 19

type AnonymousBangEqual = AST.Token.Token "!=" 32

type AnonymousDQuote = AST.Token.Token "\"" 117

type AnonymousHashdefine = AST.Token.Token "#define" 4

type AnonymousHashelif = AST.Token.Token "#elif" 14

type AnonymousHashelse = AST.Token.Token "#else" 13

type AnonymousHashendif = AST.Token.Token "#endif" 10

type AnonymousHashif = AST.Token.Token "#if" 9

type AnonymousHashifdef = AST.Token.Token "#ifdef" 11

type AnonymousHashifndef = AST.Token.Token "#ifndef" 12

type AnonymousHashinclude = AST.Token.Token "#include" 2

type AnonymousPercent = AST.Token.Token "%" 25

type AnonymousPercentEqual = AST.Token.Token "%=" 93

type AnonymousAmpersand = AST.Token.Token "&" 30

type AnonymousAmpersandAmpersand = AST.Token.Token "&&" 27

type AnonymousAmpersandEqual = AST.Token.Token "&=" 98

type AnonymousSQuote = AST.Token.Token "'" 111

type AnonymousLParen = AST.Token.Token "(" 5

type AnonymousRParen = AST.Token.Token ")" 8

type AnonymousStar = AST.Token.Token "*" 23

type AnonymousStarEqual = AST.Token.Token "*=" 91

type AnonymousPlus = AST.Token.Token "+" 22

type AnonymousPlusPlus = AST.Token.Token "++" 102

type AnonymousPlusEqual = AST.Token.Token "+=" 94

type AnonymousComma = AST.Token.Token "," 7

type AnonymousMinus = AST.Token.Token "-" 21

type AnonymousMinusMinus = AST.Token.Token "--" 101

type AnonymousMinusEqual = AST.Token.Token "-=" 95

type AnonymousMinusRAngle = AST.Token.Token "->" 105

type AnonymousDot = AST.Token.Token "." 104

type AnonymousDotDotDot = AST.Token.Token "..." 6

type AnonymousSlash = AST.Token.Token "/" 24

type AnonymousSlashEqual = AST.Token.Token "/=" 92

type AnonymousColon = AST.Token.Token ":" 77

type AnonymousSemicolon = AST.Token.Token ";" 39

type AnonymousLAngle = AST.Token.Token "<" 36

type AnonymousLAngleLAngle = AST.Token.Token "<<" 37

type AnonymousLAngleLAngleEqual = AST.Token.Token "<<=" 96

type AnonymousLAngleEqual = AST.Token.Token "<=" 35

type AnonymousEqual = AST.Token.Token "=" 60

type AnonymousEqualEqual = AST.Token.Token "==" 31

type AnonymousRAngle = AST.Token.Token ">" 33

type AnonymousRAngleEqual = AST.Token.Token ">=" 34

type AnonymousRAngleRAngle = AST.Token.Token ">>" 38

type AnonymousRAngleRAngleEqual = AST.Token.Token ">>=" 97

type AnonymousQuestion = AST.Token.Token "?" 90

type AnonymousLDQuote = AST.Token.Token "L\"" 113

type AnonymousLSQuote = AST.Token.Token "L'" 107

type AnonymousUDQuote = AST.Token.Token "U\"" 115

type AnonymousUSQuote = AST.Token.Token "U'" 109

type AnonymousLBracket = AST.Token.Token "[" 58

type AnonymousRBracket = AST.Token.Token "]" 59

type AnonymousCaret = AST.Token.Token "^" 29

type AnonymousCaretEqual = AST.Token.Token "^=" 99

type AnonymousAtomic = AST.Token.Token "_Atomic" 68

type AnonymousUnderscoreattributeUnderscore =
  AST.Token.Token
    "__attribute__"
    42

type AnonymousUnderscorebased = AST.Token.Token "__based" 44

type AnonymousUnderscorecdecl = AST.Token.Token "__cdecl" 45

type AnonymousUnderscoreclrcall = AST.Token.Token "__clrcall" 46

type AnonymousUnderscoredeclspec = AST.Token.Token "__declspec" 43

type AnonymousUnderscorefastcall = AST.Token.Token "__fastcall" 48

type AnonymousUnderscorestdcall = AST.Token.Token "__stdcall" 47

type AnonymousUnderscorethiscall = AST.Token.Token "__thiscall" 49

type AnonymousUnderscoreunaligned =
  AST.Token.Token
    "__unaligned"
    55

type AnonymousUnderscorevectorcall =
  AST.Token.Token
    "__vectorcall"
    50

type AnonymousUnaligned = AST.Token.Token "_unaligned" 54

type AnonymousAuto = AST.Token.Token "auto" 62

type AnonymousBreak = AST.Token.Token "break" 87

type AnonymousCase = AST.Token.Token "case" 81

type AnonymousConst = AST.Token.Token "const" 65

type AnonymousContinue = AST.Token.Token "continue" 88

type AnonymousDefault = AST.Token.Token "default" 82

type AnonymousDefined = AST.Token.Token "defined" 18

type AnonymousDo = AST.Token.Token "do" 84

type AnonymousElse = AST.Token.Token "else" 79

type AnonymousEnum = AST.Token.Token "enum" 74

data EscapeSequence a = EscapeSequence {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_765.
      AST.Traversable1.Class.Traversable1 a_765
    )

instance AST.Unmarshal.SymbolMatching EscapeSequence where
  matchedSymbols _ = [119]
  showFailure _ node_766 =
    "expected "
      GHC.Base.<> ( "escape_sequence"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_766 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_766) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_767 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_768 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_769 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_770 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_767
        c1_768 = TreeSitter.Node.nodeStartPoint node_766
      TreeSitter.Node.TSPoint
        r2_769
        c2_770 = TreeSitter.Node.nodeEndPoint node_766

deriving instance GHC.Classes.Eq a_771 => GHC.Classes.Eq (EscapeSequence a_771)

deriving instance GHC.Classes.Ord a_772 => GHC.Classes.Ord (EscapeSequence a_772)

deriving instance GHC.Show.Show a_773 => GHC.Show.Show (EscapeSequence a_773)

instance AST.Unmarshal.Unmarshal EscapeSequence

instance Data.Foldable.Foldable EscapeSequence where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor EscapeSequence where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable EscapeSequence where
  traverse = AST.Traversable1.Class.traverseDefault1

type AnonymousExtern = AST.Token.Token "extern" 41

data False a = False {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_774.
      AST.Traversable1.Class.Traversable1 a_774
    )

instance AST.Unmarshal.SymbolMatching False where
  matchedSymbols _ = [122]
  showFailure _ node_775 =
    "expected "
      GHC.Base.<> ( "false"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_775 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_775) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_776 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_777 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_778 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_779 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_776
        c1_777 = TreeSitter.Node.nodeStartPoint node_775
      TreeSitter.Node.TSPoint
        r2_778
        c2_779 = TreeSitter.Node.nodeEndPoint node_775

deriving instance GHC.Classes.Eq a_780 => GHC.Classes.Eq (False a_780)

deriving instance GHC.Classes.Ord a_781 => GHC.Classes.Ord (False a_781)

deriving instance GHC.Show.Show a_782 => GHC.Show.Show (False a_782)

instance AST.Unmarshal.Unmarshal False

instance Data.Foldable.Foldable False where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor False where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable False where
  traverse = AST.Traversable1.Class.traverseDefault1

data FieldIdentifier a = FieldIdentifier {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_783.
      AST.Traversable1.Class.Traversable1 a_783
    )

instance AST.Unmarshal.SymbolMatching FieldIdentifier where
  matchedSymbols _ = [253]
  showFailure _ node_784 =
    "expected "
      GHC.Base.<> ( "field_identifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_784 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_784) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_785 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_786 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_787 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_788 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_785
        c1_786 = TreeSitter.Node.nodeStartPoint node_784
      TreeSitter.Node.TSPoint
        r2_787
        c2_788 = TreeSitter.Node.nodeEndPoint node_784

deriving instance GHC.Classes.Eq a_789 => GHC.Classes.Eq (FieldIdentifier a_789)

deriving instance GHC.Classes.Ord a_790 => GHC.Classes.Ord (FieldIdentifier a_790)

deriving instance GHC.Show.Show a_791 => GHC.Show.Show (FieldIdentifier a_791)

instance AST.Unmarshal.Unmarshal FieldIdentifier

instance Data.Foldable.Foldable FieldIdentifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor FieldIdentifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable FieldIdentifier where
  traverse = AST.Traversable1.Class.traverseDefault1

type AnonymousFor = AST.Token.Token "for" 85

type AnonymousGoto = AST.Token.Token "goto" 89

data Identifier a = Identifier {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_792.
      AST.Traversable1.Class.Traversable1 a_792
    )

instance AST.Unmarshal.SymbolMatching Identifier where
  matchedSymbols _ = [1]
  showFailure _ node_793 =
    "expected "
      GHC.Base.<> ( "identifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_793 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_793) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_794 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_795 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_796 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_797 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_794
        c1_795 = TreeSitter.Node.nodeStartPoint node_793
      TreeSitter.Node.TSPoint
        r2_796
        c2_797 = TreeSitter.Node.nodeEndPoint node_793

deriving instance GHC.Classes.Eq a_798 => GHC.Classes.Eq (Identifier a_798)

deriving instance GHC.Classes.Ord a_799 => GHC.Classes.Ord (Identifier a_799)

deriving instance GHC.Show.Show a_800 => GHC.Show.Show (Identifier a_800)

instance AST.Unmarshal.Unmarshal Identifier

instance Data.Foldable.Foldable Identifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Identifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Identifier where
  traverse = AST.Traversable1.Class.traverseDefault1

type AnonymousIf = AST.Token.Token "if" 78

type AnonymousInline = AST.Token.Token "inline" 64

type AnonymousLong = AST.Token.Token "long" 71

data MsRestrictModifier a = MsRestrictModifier {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_801.
      AST.Traversable1.Class.Traversable1 a_801
    )

instance AST.Unmarshal.SymbolMatching MsRestrictModifier where
  matchedSymbols _ = [51]
  showFailure _ node_802 =
    "expected "
      GHC.Base.<> ( "ms_restrict_modifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_802 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_802) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_803 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_804 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_805 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_806 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_803
        c1_804 = TreeSitter.Node.nodeStartPoint node_802
      TreeSitter.Node.TSPoint
        r2_805
        c2_806 = TreeSitter.Node.nodeEndPoint node_802

deriving instance GHC.Classes.Eq a_807 => GHC.Classes.Eq (MsRestrictModifier a_807)

deriving instance GHC.Classes.Ord a_808 => GHC.Classes.Ord (MsRestrictModifier a_808)

deriving instance GHC.Show.Show a_809 => GHC.Show.Show (MsRestrictModifier a_809)

instance AST.Unmarshal.Unmarshal MsRestrictModifier

instance Data.Foldable.Foldable MsRestrictModifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor MsRestrictModifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable MsRestrictModifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data MsSignedPtrModifier a = MsSignedPtrModifier {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_810.
      AST.Traversable1.Class.Traversable1 a_810
    )

instance AST.Unmarshal.SymbolMatching MsSignedPtrModifier where
  matchedSymbols _ = [53]
  showFailure _ node_811 =
    "expected "
      GHC.Base.<> ( "ms_signed_ptr_modifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_811 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_811) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_812 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_813 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_814 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_815 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_812
        c1_813 = TreeSitter.Node.nodeStartPoint node_811
      TreeSitter.Node.TSPoint
        r2_814
        c2_815 = TreeSitter.Node.nodeEndPoint node_811

deriving instance GHC.Classes.Eq a_816 => GHC.Classes.Eq (MsSignedPtrModifier a_816)

deriving instance GHC.Classes.Ord a_817 => GHC.Classes.Ord (MsSignedPtrModifier a_817)

deriving instance GHC.Show.Show a_818 => GHC.Show.Show (MsSignedPtrModifier a_818)

instance AST.Unmarshal.Unmarshal MsSignedPtrModifier

instance Data.Foldable.Foldable MsSignedPtrModifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor MsSignedPtrModifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable MsSignedPtrModifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data MsUnsignedPtrModifier a = MsUnsignedPtrModifier {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_819.
      AST.Traversable1.Class.Traversable1 a_819
    )

instance AST.Unmarshal.SymbolMatching MsUnsignedPtrModifier where
  matchedSymbols _ = [52]
  showFailure _ node_820 =
    "expected "
      GHC.Base.<> ( "ms_unsigned_ptr_modifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_820 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_820) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_821 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_822 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_823 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_824 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_821
        c1_822 = TreeSitter.Node.nodeStartPoint node_820
      TreeSitter.Node.TSPoint
        r2_823
        c2_824 = TreeSitter.Node.nodeEndPoint node_820

deriving instance GHC.Classes.Eq a_825 => GHC.Classes.Eq (MsUnsignedPtrModifier a_825)

deriving instance GHC.Classes.Ord a_826 => GHC.Classes.Ord (MsUnsignedPtrModifier a_826)

deriving instance GHC.Show.Show a_827 => GHC.Show.Show (MsUnsignedPtrModifier a_827)

instance AST.Unmarshal.Unmarshal MsUnsignedPtrModifier

instance Data.Foldable.Foldable MsUnsignedPtrModifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor MsUnsignedPtrModifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable MsUnsignedPtrModifier where
  traverse = AST.Traversable1.Class.traverseDefault1

data Null a = Null {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_828.
      AST.Traversable1.Class.Traversable1 a_828
    )

instance AST.Unmarshal.SymbolMatching Null where
  matchedSymbols _ = [123]
  showFailure _ node_829 =
    "expected "
      GHC.Base.<> ( "null"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_829 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_829) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_830 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_831 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_832 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_833 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_830
        c1_831 = TreeSitter.Node.nodeStartPoint node_829
      TreeSitter.Node.TSPoint
        r2_832
        c2_833 = TreeSitter.Node.nodeEndPoint node_829

deriving instance GHC.Classes.Eq a_834 => GHC.Classes.Eq (Null a_834)

deriving instance GHC.Classes.Ord a_835 => GHC.Classes.Ord (Null a_835)

deriving instance GHC.Show.Show a_836 => GHC.Show.Show (Null a_836)

instance AST.Unmarshal.Unmarshal Null

instance Data.Foldable.Foldable Null where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor Null where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable Null where
  traverse = AST.Traversable1.Class.traverseDefault1

data NumberLiteral a = NumberLiteral {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_837.
      AST.Traversable1.Class.Traversable1 a_837
    )

instance AST.Unmarshal.SymbolMatching NumberLiteral where
  matchedSymbols _ = [106]
  showFailure _ node_838 =
    "expected "
      GHC.Base.<> ( "number_literal"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_838 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_838) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_839 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_840 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_841 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_842 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_839
        c1_840 = TreeSitter.Node.nodeStartPoint node_838
      TreeSitter.Node.TSPoint
        r2_841
        c2_842 = TreeSitter.Node.nodeEndPoint node_838

deriving instance GHC.Classes.Eq a_843 => GHC.Classes.Eq (NumberLiteral a_843)

deriving instance GHC.Classes.Ord a_844 => GHC.Classes.Ord (NumberLiteral a_844)

deriving instance GHC.Show.Show a_845 => GHC.Show.Show (NumberLiteral a_845)

instance AST.Unmarshal.Unmarshal NumberLiteral

instance Data.Foldable.Foldable NumberLiteral where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor NumberLiteral where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable NumberLiteral where
  traverse = AST.Traversable1.Class.traverseDefault1

data PreprocArg a = PreprocArg {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_846.
      AST.Traversable1.Class.Traversable1 a_846
    )

instance AST.Unmarshal.SymbolMatching PreprocArg where
  matchedSymbols _ = [16]
  showFailure _ node_847 =
    "expected "
      GHC.Base.<> ( "preproc_arg"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_847 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_847) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_848 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_849 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_850 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_851 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_848
        c1_849 = TreeSitter.Node.nodeStartPoint node_847
      TreeSitter.Node.TSPoint
        r2_850
        c2_851 = TreeSitter.Node.nodeEndPoint node_847

deriving instance GHC.Classes.Eq a_852 => GHC.Classes.Eq (PreprocArg a_852)

deriving instance GHC.Classes.Ord a_853 => GHC.Classes.Ord (PreprocArg a_853)

deriving instance GHC.Show.Show a_854 => GHC.Show.Show (PreprocArg a_854)

instance AST.Unmarshal.Unmarshal PreprocArg

instance Data.Foldable.Foldable PreprocArg where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor PreprocArg where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable PreprocArg where
  traverse = AST.Traversable1.Class.traverseDefault1

data PreprocDirective a = PreprocDirective {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_855.
      AST.Traversable1.Class.Traversable1 a_855
    )

instance AST.Unmarshal.SymbolMatching PreprocDirective where
  matchedSymbols _ = [15]
  showFailure _ node_856 =
    "expected "
      GHC.Base.<> ( "preproc_directive"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_856 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_856) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_857 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_858 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_859 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_860 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_857
        c1_858 = TreeSitter.Node.nodeStartPoint node_856
      TreeSitter.Node.TSPoint
        r2_859
        c2_860 = TreeSitter.Node.nodeEndPoint node_856

deriving instance GHC.Classes.Eq a_861 => GHC.Classes.Eq (PreprocDirective a_861)

deriving instance GHC.Classes.Ord a_862 => GHC.Classes.Ord (PreprocDirective a_862)

deriving instance GHC.Show.Show a_863 => GHC.Show.Show (PreprocDirective a_863)

instance AST.Unmarshal.Unmarshal PreprocDirective

instance Data.Foldable.Foldable PreprocDirective where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor PreprocDirective where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable PreprocDirective where
  traverse = AST.Traversable1.Class.traverseDefault1

data PrimitiveType a = PrimitiveType {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_864.
      AST.Traversable1.Class.Traversable1 a_864
    )

instance AST.Unmarshal.SymbolMatching PrimitiveType where
  matchedSymbols _ = [73]
  showFailure _ node_865 =
    "expected "
      GHC.Base.<> ( "primitive_type"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_865 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_865) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_866 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_867 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_868 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_869 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_866
        c1_867 = TreeSitter.Node.nodeStartPoint node_865
      TreeSitter.Node.TSPoint
        r2_868
        c2_869 = TreeSitter.Node.nodeEndPoint node_865

deriving instance GHC.Classes.Eq a_870 => GHC.Classes.Eq (PrimitiveType a_870)

deriving instance GHC.Classes.Ord a_871 => GHC.Classes.Ord (PrimitiveType a_871)

deriving instance GHC.Show.Show a_872 => GHC.Show.Show (PrimitiveType a_872)

instance AST.Unmarshal.Unmarshal PrimitiveType

instance Data.Foldable.Foldable PrimitiveType where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor PrimitiveType where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable PrimitiveType where
  traverse = AST.Traversable1.Class.traverseDefault1

type AnonymousRegister = AST.Token.Token "register" 63

type AnonymousRestrict = AST.Token.Token "restrict" 67

type AnonymousReturn = AST.Token.Token "return" 86

type AnonymousShort = AST.Token.Token "short" 72

type AnonymousSigned = AST.Token.Token "signed" 69

type AnonymousSizeof = AST.Token.Token "sizeof" 103

data StatementIdentifier a = StatementIdentifier {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_873.
      AST.Traversable1.Class.Traversable1 a_873
    )

instance AST.Unmarshal.SymbolMatching StatementIdentifier where
  matchedSymbols _ = [254]
  showFailure _ node_874 =
    "expected "
      GHC.Base.<> ( "statement_identifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_874 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_874) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_875 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_876 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_877 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_878 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_875
        c1_876 = TreeSitter.Node.nodeStartPoint node_874
      TreeSitter.Node.TSPoint
        r2_877
        c2_878 = TreeSitter.Node.nodeEndPoint node_874

deriving instance GHC.Classes.Eq a_879 => GHC.Classes.Eq (StatementIdentifier a_879)

deriving instance GHC.Classes.Ord a_880 => GHC.Classes.Ord (StatementIdentifier a_880)

deriving instance GHC.Show.Show a_881 => GHC.Show.Show (StatementIdentifier a_881)

instance AST.Unmarshal.Unmarshal StatementIdentifier

instance Data.Foldable.Foldable StatementIdentifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor StatementIdentifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable StatementIdentifier where
  traverse = AST.Traversable1.Class.traverseDefault1

type AnonymousStatic = AST.Token.Token "static" 61

type AnonymousStruct = AST.Token.Token "struct" 75

type AnonymousSwitch = AST.Token.Token "switch" 80

data SystemLibString a = SystemLibString {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_882.
      AST.Traversable1.Class.Traversable1 a_882
    )

instance AST.Unmarshal.SymbolMatching SystemLibString where
  matchedSymbols _ = [120]
  showFailure _ node_883 =
    "expected "
      GHC.Base.<> ( "system_lib_string"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_883 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_883) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_884 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_885 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_886 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_887 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_884
        c1_885 = TreeSitter.Node.nodeStartPoint node_883
      TreeSitter.Node.TSPoint
        r2_886
        c2_887 = TreeSitter.Node.nodeEndPoint node_883

deriving instance GHC.Classes.Eq a_888 => GHC.Classes.Eq (SystemLibString a_888)

deriving instance GHC.Classes.Ord a_889 => GHC.Classes.Ord (SystemLibString a_889)

deriving instance GHC.Show.Show a_890 => GHC.Show.Show (SystemLibString a_890)

instance AST.Unmarshal.Unmarshal SystemLibString

instance Data.Foldable.Foldable SystemLibString where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor SystemLibString where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable SystemLibString where
  traverse = AST.Traversable1.Class.traverseDefault1

data True a = True {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_891.
      AST.Traversable1.Class.Traversable1 a_891
    )

instance AST.Unmarshal.SymbolMatching True where
  matchedSymbols _ = [121]
  showFailure _ node_892 =
    "expected "
      GHC.Base.<> ( "true"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_892 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_892) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_893 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_894 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_895 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_896 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_893
        c1_894 = TreeSitter.Node.nodeStartPoint node_892
      TreeSitter.Node.TSPoint
        r2_895
        c2_896 = TreeSitter.Node.nodeEndPoint node_892

deriving instance GHC.Classes.Eq a_897 => GHC.Classes.Eq (True a_897)

deriving instance GHC.Classes.Ord a_898 => GHC.Classes.Ord (True a_898)

deriving instance GHC.Show.Show a_899 => GHC.Show.Show (True a_899)

instance AST.Unmarshal.Unmarshal True

instance Data.Foldable.Foldable True where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor True where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable True where
  traverse = AST.Traversable1.Class.traverseDefault1

data TypeIdentifier a = TypeIdentifier {ann :: a, text :: Data.Text.Internal.Text}
  deriving stock (GHC.Generics.Generic, GHC.Generics.Generic1)
  deriving anyclass
    ( forall a_900.
      AST.Traversable1.Class.Traversable1 a_900
    )

instance AST.Unmarshal.SymbolMatching TypeIdentifier where
  matchedSymbols _ = [255]
  showFailure _ node_901 =
    "expected "
      GHC.Base.<> ( "type_identifier"
                      GHC.Base.<> ( " but got "
                                      GHC.Base.<> ( if TreeSitter.Node.nodeSymbol node_901 GHC.Classes.== 65535
                                                      then "ERROR"
                                                      else Data.OldList.genericIndex debugSymbolNames (TreeSitter.Node.nodeSymbol node_901) GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r1_902 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c1_903 GHC.Base.<> ("] -" GHC.Base.<> (" [" GHC.Base.<> (GHC.Show.show r2_904 GHC.Base.<> (", " GHC.Base.<> (GHC.Show.show c2_905 GHC.Base.<> "]")))))))))
                                                  )
                                  )
                  )
    where
      TreeSitter.Node.TSPoint
        r1_902
        c1_903 = TreeSitter.Node.nodeStartPoint node_901
      TreeSitter.Node.TSPoint
        r2_904
        c2_905 = TreeSitter.Node.nodeEndPoint node_901

deriving instance GHC.Classes.Eq a_906 => GHC.Classes.Eq (TypeIdentifier a_906)

deriving instance GHC.Classes.Ord a_907 => GHC.Classes.Ord (TypeIdentifier a_907)

deriving instance GHC.Show.Show a_908 => GHC.Show.Show (TypeIdentifier a_908)

instance AST.Unmarshal.Unmarshal TypeIdentifier

instance Data.Foldable.Foldable TypeIdentifier where
  foldMap = AST.Traversable1.Class.foldMapDefault1

instance GHC.Base.Functor TypeIdentifier where
  fmap = AST.Traversable1.Class.fmapDefault1

instance Data.Traversable.Traversable TypeIdentifier where
  traverse = AST.Traversable1.Class.traverseDefault1

type AnonymousTypedef = AST.Token.Token "typedef" 40

type AnonymousU16DQuote = AST.Token.Token "u\"" 114

type AnonymousU16SQuote = AST.Token.Token "u'" 108

type AnonymousU8DQuote = AST.Token.Token "u8\"" 116

type AnonymousU8SQuote = AST.Token.Token "u8'" 110

type AnonymousUnion = AST.Token.Token "union" 76

type AnonymousUnsigned = AST.Token.Token "unsigned" 70

type AnonymousVolatile = AST.Token.Token "volatile" 66

type AnonymousWhile = AST.Token.Token "while" 83

type AnonymousLBrace = AST.Token.Token "{" 56

type AnonymousPipe = AST.Token.Token "|" 28

type AnonymousPipeEqual = AST.Token.Token "|=" 100

type AnonymousPipePipe = AST.Token.Token "||" 26

type AnonymousRBrace = AST.Token.Token "}" 57

type AnonymousTilde = AST.Token.Token "~" 20
